// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/VasySS/segoya-backend/internal/dto"
	entitylobby "github.com/VasySS/segoya-backend/internal/entity/lobby"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddLobbyExpiration provides a mock function with given fields: ctx, id, ttl
func (_m *Repository) AddLobbyExpiration(ctx context.Context, id string, ttl time.Duration) error {
	ret := _m.Called(ctx, id, ttl)

	if len(ret) == 0 {
		panic("no return value specified for AddLobbyExpiration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) error); ok {
		r0 = rf(ctx, id, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DecrementLobbyPlayers provides a mock function with given fields: ctx, id
func (_m *Repository) DecrementLobbyPlayers(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DecrementLobbyPlayers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLobby provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteLobby(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLobby")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteLobbyExpiration provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteLobbyExpiration(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLobbyExpiration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLobbies provides a mock function with given fields: ctx, req
func (_m *Repository) GetLobbies(ctx context.Context, req dto.GetLobbiesRequest) ([]entitylobby.Lobby, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetLobbies")
	}

	var r0 []entitylobby.Lobby
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetLobbiesRequest) ([]entitylobby.Lobby, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetLobbiesRequest) []entitylobby.Lobby); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entitylobby.Lobby)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetLobbiesRequest) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, dto.GetLobbiesRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetLobby provides a mock function with given fields: ctx, id
func (_m *Repository) GetLobby(ctx context.Context, id string) (entitylobby.Lobby, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetLobby")
	}

	var r0 entitylobby.Lobby
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entitylobby.Lobby, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entitylobby.Lobby); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entitylobby.Lobby)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrementLobbyPlayers provides a mock function with given fields: ctx, id
func (_m *Repository) IncrementLobbyPlayers(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for IncrementLobbyPlayers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLobby provides a mock function with given fields: ctx, req
func (_m *Repository) NewLobby(ctx context.Context, req dto.NewLobbyRequestDB) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewLobby")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewLobbyRequestDB) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
