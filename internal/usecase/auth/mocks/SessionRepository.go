// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/VasySS/segoya-backend/internal/dto"
	mock "github.com/stretchr/testify/mock"

	user "github.com/VasySS/segoya-backend/internal/entity/user"
)

// SessionRepository is an autogenerated mock type for the SessionRepository type
type SessionRepository struct {
	mock.Mock
}

// DeleteSession provides a mock function with given fields: ctx, userID, sessionID
func (_m *SessionRepository) DeleteSession(ctx context.Context, userID int, sessionID string) error {
	ret := _m.Called(ctx, userID, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, userID, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOAuthUserID provides a mock function with given fields: ctx, state
func (_m *SessionRepository) GetOAuthUserID(ctx context.Context, state string) (int, error) {
	ret := _m.Called(ctx, state)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuthUserID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, state)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, state)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, state)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, userID, sessionID
func (_m *SessionRepository) GetSession(ctx context.Context, userID int, sessionID string) (user.Session, error) {
	ret := _m.Called(ctx, userID, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 user.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (user.Session, error)); ok {
		return rf(ctx, userID, sessionID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) user.Session); ok {
		r0 = rf(ctx, userID, sessionID)
	} else {
		r0 = ret.Get(0).(user.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userID, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessions provides a mock function with given fields: ctx, userID
func (_m *SessionRepository) GetSessions(ctx context.Context, userID int) ([]user.Session, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetSessions")
	}

	var r0 []user.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]user.Session, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []user.Session); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.Session)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOAuthState provides a mock function with given fields: ctx, req
func (_m *SessionRepository) NewOAuthState(ctx context.Context, req dto.NewOAuthRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewOAuthState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewOAuthRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSession provides a mock function with given fields: ctx, req
func (_m *SessionRepository) NewSession(ctx context.Context, req dto.NewSessionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewSessionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSession provides a mock function with given fields: ctx, req
func (_m *SessionRepository) UpdateSession(ctx context.Context, req dto.UpdateSessionRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateSessionRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSessionRepository creates a new instance of SessionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepository {
	mock := &SessionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
