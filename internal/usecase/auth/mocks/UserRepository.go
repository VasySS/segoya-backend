// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/VasySS/segoya-backend/internal/dto"
	mock "github.com/stretchr/testify/mock"

	user "github.com/VasySS/segoya-backend/internal/entity/user"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// DeleteOAuth provides a mock function with given fields: ctx, req
func (_m *UserRepository) DeleteOAuth(ctx context.Context, req dto.DeleteOAuthRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.DeleteOAuthRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOAuth provides a mock function with given fields: ctx, userID
func (_m *UserRepository) GetOAuth(ctx context.Context, userID int) ([]user.OAuth, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetOAuth")
	}

	var r0 []user.OAuth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]user.OAuth, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []user.OAuth); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.OAuth)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByOAuth provides a mock function with given fields: ctx, req
func (_m *UserRepository) GetUserByOAuth(ctx context.Context, req dto.GetUserByOAuthRequest) (user.PrivateProfile, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByOAuth")
	}

	var r0 user.PrivateProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetUserByOAuthRequest) (user.PrivateProfile, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetUserByOAuthRequest) user.PrivateProfile); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(user.PrivateProfile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetUserByOAuthRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepository) GetUserByUsername(ctx context.Context, username string) (user.PrivateProfile, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 user.PrivateProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (user.PrivateProfile, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) user.PrivateProfile); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(user.PrivateProfile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOAuth provides a mock function with given fields: ctx, req
func (_m *UserRepository) NewOAuth(ctx context.Context, req dto.NewOAuthRequestDB) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewOAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewOAuthRequestDB) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUser provides a mock function with given fields: ctx, req
func (_m *UserRepository) NewUser(ctx context.Context, req dto.RegisterRequestDB) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.RegisterRequestDB) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
