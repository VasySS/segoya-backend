// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	user "github.com/VasySS/segoya-backend/internal/entity/user"
)

// TokenService is an autogenerated mock type for the TokenService type
type TokenService struct {
	mock.Mock
}

// NewAccessToken provides a mock function with given fields: current, req
func (_m *TokenService) NewAccessToken(current time.Time, req user.AccessTokenClaims) (string, error) {
	ret := _m.Called(current, req)

	if len(ret) == 0 {
		panic("no return value specified for NewAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, user.AccessTokenClaims) (string, error)); ok {
		return rf(current, req)
	}
	if rf, ok := ret.Get(0).(func(time.Time, user.AccessTokenClaims) string); ok {
		r0 = rf(current, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(time.Time, user.AccessTokenClaims) error); ok {
		r1 = rf(current, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRefreshToken provides a mock function with given fields: current, req
func (_m *TokenService) NewRefreshToken(current time.Time, req user.RefreshTokenClaims) (string, error) {
	ret := _m.Called(current, req)

	if len(ret) == 0 {
		panic("no return value specified for NewRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(time.Time, user.RefreshTokenClaims) (string, error)); ok {
		return rf(current, req)
	}
	if rf, ok := ret.Get(0).(func(time.Time, user.RefreshTokenClaims) string); ok {
		r0 = rf(current, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(time.Time, user.RefreshTokenClaims) error); ok {
		r1 = rf(current, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseAccessToken provides a mock function with given fields: token
func (_m *TokenService) ParseAccessToken(token string) (user.AccessTokenClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ParseAccessToken")
	}

	var r0 user.AccessTokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.AccessTokenClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) user.AccessTokenClaims); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(user.AccessTokenClaims)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseRefreshToken provides a mock function with given fields: token
func (_m *TokenService) ParseRefreshToken(token string) (user.RefreshTokenClaims, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for ParseRefreshToken")
	}

	var r0 user.RefreshTokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (user.RefreshTokenClaims, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) user.RefreshTokenClaims); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(user.RefreshTokenClaims)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenService creates a new instance of TokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenService {
	mock := &TokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
