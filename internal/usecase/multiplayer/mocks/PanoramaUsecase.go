// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	game "github.com/VasySS/segoya-backend/internal/entity/game"
	mock "github.com/stretchr/testify/mock"
)

// PanoramaUsecase is an autogenerated mock type for the PanoramaUsecase type
type PanoramaUsecase struct {
	mock.Mock
}

// CalculateScoreAndDistance provides a mock function with given fields: provider, realLat, realLng, userLat, userLng
func (_m *PanoramaUsecase) CalculateScoreAndDistance(provider game.PanoramaProvider, realLat float64, realLng float64, userLat float64, userLng float64) (int, int) {
	ret := _m.Called(provider, realLat, realLng, userLat, userLng)

	if len(ret) == 0 {
		panic("no return value specified for CalculateScoreAndDistance")
	}

	var r0 int
	var r1 int
	if rf, ok := ret.Get(0).(func(game.PanoramaProvider, float64, float64, float64, float64) (int, int)); ok {
		return rf(provider, realLat, realLng, userLat, userLng)
	}
	if rf, ok := ret.Get(0).(func(game.PanoramaProvider, float64, float64, float64, float64) int); ok {
		r0 = rf(provider, realLat, realLng, userLat, userLng)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(game.PanoramaProvider, float64, float64, float64, float64) int); ok {
		r1 = rf(provider, realLat, realLng, userLat, userLng)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetStreetview provides a mock function with given fields: ctx, provider, id
func (_m *PanoramaUsecase) GetStreetview(ctx context.Context, provider game.PanoramaProvider, id int) (game.PanoramaMetadata, error) {
	ret := _m.Called(ctx, provider, id)

	if len(ret) == 0 {
		panic("no return value specified for GetStreetview")
	}

	var r0 game.PanoramaMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, game.PanoramaProvider, int) (game.PanoramaMetadata, error)); ok {
		return rf(ctx, provider, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, game.PanoramaProvider, int) game.PanoramaMetadata); ok {
		r0 = rf(ctx, provider, id)
	} else {
		r0 = ret.Get(0).(game.PanoramaMetadata)
	}

	if rf, ok := ret.Get(1).(func(context.Context, game.PanoramaProvider, int) error); ok {
		r1 = rf(ctx, provider, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStreetview provides a mock function with given fields: ctx, provider
func (_m *PanoramaUsecase) NewStreetview(ctx context.Context, provider game.PanoramaProvider) (game.PanoramaMetadata, error) {
	ret := _m.Called(ctx, provider)

	if len(ret) == 0 {
		panic("no return value specified for NewStreetview")
	}

	var r0 game.PanoramaMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, game.PanoramaProvider) (game.PanoramaMetadata, error)); ok {
		return rf(ctx, provider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, game.PanoramaProvider) game.PanoramaMetadata); ok {
		r0 = rf(ctx, provider)
	} else {
		r0 = ret.Get(0).(game.PanoramaMetadata)
	}

	if rf, ok := ret.Get(1).(func(context.Context, game.PanoramaProvider) error); ok {
		r1 = rf(ctx, provider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPanoramaUsecase creates a new instance of PanoramaUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPanoramaUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *PanoramaUsecase {
	mock := &PanoramaUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
