// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/VasySS/segoya-backend/internal/dto"
	gamemultiplayer "github.com/VasySS/segoya-backend/internal/entity/game/multiplayer"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/VasySS/segoya-backend/internal/infrastructure/repository"

	user "github.com/VasySS/segoya-backend/internal/entity/user"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// EndMultiplayerGame provides a mock function with given fields: ctx, req
func (_m *Repository) EndMultiplayerGame(ctx context.Context, req dto.EndMultiplayerGameRequestDB) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for EndMultiplayerGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.EndMultiplayerGameRequestDB) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EndMultiplayerRound provides a mock function with given fields: ctx, req
func (_m *Repository) EndMultiplayerRound(ctx context.Context, req dto.EndMultiplayerRoundRequestDB) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for EndMultiplayerRound")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.EndMultiplayerRoundRequestDB) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMultiplayerGame provides a mock function with given fields: ctx, id
func (_m *Repository) GetMultiplayerGame(ctx context.Context, id int) (gamemultiplayer.Game, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiplayerGame")
	}

	var r0 gamemultiplayer.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (gamemultiplayer.Game, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) gamemultiplayer.Game); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(gamemultiplayer.Game)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiplayerGameGuesses provides a mock function with given fields: ctx, gameID
func (_m *Repository) GetMultiplayerGameGuesses(ctx context.Context, gameID int) ([]gamemultiplayer.Guess, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiplayerGameGuesses")
	}

	var r0 []gamemultiplayer.Guess
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]gamemultiplayer.Guess, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []gamemultiplayer.Guess); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gamemultiplayer.Guess)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiplayerGameUser provides a mock function with given fields: ctx, userID, gameID
func (_m *Repository) GetMultiplayerGameUser(ctx context.Context, userID int, gameID int) (user.MultiplayerUser, error) {
	ret := _m.Called(ctx, userID, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiplayerGameUser")
	}

	var r0 user.MultiplayerUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (user.MultiplayerUser, error)); ok {
		return rf(ctx, userID, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) user.MultiplayerUser); ok {
		r0 = rf(ctx, userID, gameID)
	} else {
		r0 = ret.Get(0).(user.MultiplayerUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, userID, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiplayerGameUsers provides a mock function with given fields: ctx, gameID
func (_m *Repository) GetMultiplayerGameUsers(ctx context.Context, gameID int) ([]user.MultiplayerUser, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiplayerGameUsers")
	}

	var r0 []user.MultiplayerUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]user.MultiplayerUser, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []user.MultiplayerUser); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]user.MultiplayerUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiplayerRound provides a mock function with given fields: ctx, gameID, roundNum
func (_m *Repository) GetMultiplayerRound(ctx context.Context, gameID int, roundNum int) (gamemultiplayer.Round, error) {
	ret := _m.Called(ctx, gameID, roundNum)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiplayerRound")
	}

	var r0 gamemultiplayer.Round
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (gamemultiplayer.Round, error)); ok {
		return rf(ctx, gameID, roundNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) gamemultiplayer.Round); ok {
		r0 = rf(ctx, gameID, roundNum)
	} else {
		r0 = ret.Get(0).(gamemultiplayer.Round)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, gameID, roundNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiplayerRoundGuesses provides a mock function with given fields: ctx, roundID
func (_m *Repository) GetMultiplayerRoundGuesses(ctx context.Context, roundID int) ([]gamemultiplayer.Guess, error) {
	ret := _m.Called(ctx, roundID)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiplayerRoundGuesses")
	}

	var r0 []gamemultiplayer.Guess
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]gamemultiplayer.Guess, error)); ok {
		return rf(ctx, roundID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []gamemultiplayer.Guess); ok {
		r0 = rf(ctx, roundID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gamemultiplayer.Guess)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, roundID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockMultiplayerGame provides a mock function with given fields: ctx, gameID
func (_m *Repository) LockMultiplayerGame(ctx context.Context, gameID int) error {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for LockMultiplayerGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMultiplayerGame provides a mock function with given fields: ctx, req
func (_m *Repository) NewMultiplayerGame(ctx context.Context, req dto.NewMultiplayerGameRequest) (int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewMultiplayerGame")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewMultiplayerGameRequest) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewMultiplayerGameRequest) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.NewMultiplayerGameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMultiplayerRound provides a mock function with given fields: ctx, req
func (_m *Repository) NewMultiplayerRound(ctx context.Context, req dto.NewMultiplayerRoundRequestDB) (gamemultiplayer.Round, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewMultiplayerRound")
	}

	var r0 gamemultiplayer.Round
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewMultiplayerRoundRequestDB) (gamemultiplayer.Round, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewMultiplayerRoundRequestDB) gamemultiplayer.Round); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(gamemultiplayer.Round)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.NewMultiplayerRoundRequestDB) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMultiplayerRoundGuess provides a mock function with given fields: ctx, req
func (_m *Repository) NewMultiplayerRoundGuess(ctx context.Context, req dto.NewMultiplayerRoundGuessRequestDB) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewMultiplayerRoundGuess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewMultiplayerRoundGuessRequestDB) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadUncommitted provides a mock function with given fields: ctx, fn
func (_m *Repository) ReadUncommitted(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ReadUncommitted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunReadCommitted provides a mock function with given fields: ctx, fn
func (_m *Repository) RunReadCommitted(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunReadCommitted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunReadTx provides a mock function with given fields: ctx, fn
func (_m *Repository) RunReadTx(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunReadTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunRepeatableRead provides a mock function with given fields: ctx, fn
func (_m *Repository) RunRepeatableRead(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunRepeatableRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunSerializable provides a mock function with given fields: ctx, fn
func (_m *Repository) RunSerializable(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunSerializable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunTx provides a mock function with given fields: ctx, fn
func (_m *Repository) RunTx(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
