// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/VasySS/segoya-backend/internal/dto"
	gamesingleplayer "github.com/VasySS/segoya-backend/internal/entity/game/singleplayer"

	mock "github.com/stretchr/testify/mock"

	repository "github.com/VasySS/segoya-backend/internal/infrastructure/repository"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// EndSingleplayerGame provides a mock function with given fields: ctx, req
func (_m *Repository) EndSingleplayerGame(ctx context.Context, req dto.EndSingleplayerGameRequestDB) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for EndSingleplayerGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.EndSingleplayerGameRequestDB) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSingleplayerGame provides a mock function with given fields: ctx, gameID
func (_m *Repository) GetSingleplayerGame(ctx context.Context, gameID int) (gamesingleplayer.Game, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetSingleplayerGame")
	}

	var r0 gamesingleplayer.Game
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (gamesingleplayer.Game, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) gamesingleplayer.Game); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Get(0).(gamesingleplayer.Game)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleplayerGameGuesses provides a mock function with given fields: ctx, gameID
func (_m *Repository) GetSingleplayerGameGuesses(ctx context.Context, gameID int) ([]gamesingleplayer.Guess, error) {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for GetSingleplayerGameGuesses")
	}

	var r0 []gamesingleplayer.Guess
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]gamesingleplayer.Guess, error)); ok {
		return rf(ctx, gameID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []gamesingleplayer.Guess); ok {
		r0 = rf(ctx, gameID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gamesingleplayer.Guess)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, gameID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleplayerGames provides a mock function with given fields: ctx, req
func (_m *Repository) GetSingleplayerGames(ctx context.Context, req dto.GetSingleplayerGamesRequest) ([]gamesingleplayer.Game, int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetSingleplayerGames")
	}

	var r0 []gamesingleplayer.Game
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetSingleplayerGamesRequest) ([]gamesingleplayer.Game, int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetSingleplayerGamesRequest) []gamesingleplayer.Game); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]gamesingleplayer.Game)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetSingleplayerGamesRequest) int); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, dto.GetSingleplayerGamesRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetSingleplayerRound provides a mock function with given fields: ctx, gameID, roundNum
func (_m *Repository) GetSingleplayerRound(ctx context.Context, gameID int, roundNum int) (gamesingleplayer.Round, error) {
	ret := _m.Called(ctx, gameID, roundNum)

	if len(ret) == 0 {
		panic("no return value specified for GetSingleplayerRound")
	}

	var r0 gamesingleplayer.Round
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (gamesingleplayer.Round, error)); ok {
		return rf(ctx, gameID, roundNum)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) gamesingleplayer.Round); ok {
		r0 = rf(ctx, gameID, roundNum)
	} else {
		r0 = ret.Get(0).(gamesingleplayer.Round)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, gameID, roundNum)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LockSingleplayerGame provides a mock function with given fields: ctx, gameID
func (_m *Repository) LockSingleplayerGame(ctx context.Context, gameID int) error {
	ret := _m.Called(ctx, gameID)

	if len(ret) == 0 {
		panic("no return value specified for LockSingleplayerGame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, gameID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSingleplayerGame provides a mock function with given fields: ctx, req
func (_m *Repository) NewSingleplayerGame(ctx context.Context, req dto.NewSingleplayerGameRequest) (int, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewSingleplayerGame")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewSingleplayerGameRequest) (int, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewSingleplayerGameRequest) int); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.NewSingleplayerGameRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSingleplayerRound provides a mock function with given fields: ctx, req
func (_m *Repository) NewSingleplayerRound(ctx context.Context, req dto.NewSingleplayerRoundDBRequest) (gamesingleplayer.Round, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewSingleplayerRound")
	}

	var r0 gamesingleplayer.Round
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewSingleplayerRoundDBRequest) (gamesingleplayer.Round, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewSingleplayerRoundDBRequest) gamesingleplayer.Round); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(gamesingleplayer.Round)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.NewSingleplayerRoundDBRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSingleplayerRoundGuess provides a mock function with given fields: ctx, req
func (_m *Repository) NewSingleplayerRoundGuess(ctx context.Context, req dto.NewSingleplayerRoundGuessRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for NewSingleplayerRoundGuess")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.NewSingleplayerRoundGuessRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadUncommitted provides a mock function with given fields: ctx, fn
func (_m *Repository) ReadUncommitted(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ReadUncommitted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunReadCommitted provides a mock function with given fields: ctx, fn
func (_m *Repository) RunReadCommitted(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunReadCommitted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunReadTx provides a mock function with given fields: ctx, fn
func (_m *Repository) RunReadTx(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunReadTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunRepeatableRead provides a mock function with given fields: ctx, fn
func (_m *Repository) RunRepeatableRead(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunRepeatableRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunSerializable provides a mock function with given fields: ctx, fn
func (_m *Repository) RunSerializable(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunSerializable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunTx provides a mock function with given fields: ctx, fn
func (_m *Repository) RunTx(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
