// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/VasySS/segoya-backend/internal/dto"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/VasySS/segoya-backend/internal/infrastructure/repository"

	user "github.com/VasySS/segoya-backend/internal/entity/user"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetUserByID(ctx context.Context, id int) (user.PrivateProfile, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 user.PrivateProfile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (user.PrivateProfile, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) user.PrivateProfile); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(user.PrivateProfile)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadUncommitted provides a mock function with given fields: ctx, fn
func (_m *Repository) ReadUncommitted(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ReadUncommitted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunReadCommitted provides a mock function with given fields: ctx, fn
func (_m *Repository) RunReadCommitted(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunReadCommitted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunReadTx provides a mock function with given fields: ctx, fn
func (_m *Repository) RunReadTx(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunReadTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunRepeatableRead provides a mock function with given fields: ctx, fn
func (_m *Repository) RunRepeatableRead(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunRepeatableRead")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunSerializable provides a mock function with given fields: ctx, fn
func (_m *Repository) RunSerializable(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunSerializable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunTx provides a mock function with given fields: ctx, fn
func (_m *Repository) RunTx(ctx context.Context, fn repository.TxFunc) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for RunTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.TxFunc) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAvatar provides a mock function with given fields: ctx, req
func (_m *Repository) UpdateAvatar(ctx context.Context, req dto.UpdateAvatarRequestDB) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvatar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateAvatarRequestDB) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, updateInfo
func (_m *Repository) UpdateUser(ctx context.Context, updateInfo dto.UpdateUserRequest) error {
	ret := _m.Called(ctx, updateInfo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateUserRequest) error); ok {
		r0 = rf(ctx, updateInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
