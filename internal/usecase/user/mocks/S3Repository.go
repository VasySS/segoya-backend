// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
)

// S3Repository is an autogenerated mock type for the S3Repository type
type S3Repository struct {
	mock.Mock
}

// DeleteAvatar provides a mock function with given fields: ctx, fileName
func (_m *S3Repository) DeleteAvatar(ctx context.Context, fileName string) error {
	ret := _m.Called(ctx, fileName)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAvatar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadAvatar provides a mock function with given fields: ctx, file, fileName, mimeType
func (_m *S3Repository) UploadAvatar(ctx context.Context, file io.Reader, fileName string, mimeType string) error {
	ret := _m.Called(ctx, file, fileName, mimeType)

	if len(ret) == 0 {
		panic("no return value specified for UploadAvatar")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, string, string) error); ok {
		r0 = rf(ctx, file, fileName, mimeType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewS3Repository creates a new instance of S3Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewS3Repository(t interface {
	mock.TestingT
	Cleanup(func())
}) *S3Repository {
	mock := &S3Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
