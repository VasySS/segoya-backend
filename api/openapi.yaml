openapi: 3.1.0

info:
  title: Segoya backend REST API
  version: 0.3.0
  description: |
    A REST API for Segoya panorama guessing game.
  contact:
    name: Telegram
    url: https://t.me/vasyss
  license:
    name: GNU AGPLv3
    url: https://www.gnu.org/licenses/agpl-3.0.en.html

servers:
  - url: https://segoya-api.vasys.su
    description: Production environment
  - url: http://localhost:4174
    description: Local development environment

security:
  - Bearer: []

tags:
  - name: users
    description: User profile management
  - name: auth
    description: Authentication and authorization
  - name: singleplayer
    description: Singleplayer game operations
  - name: multiplayer
    description: Multiplayer game operations
  - name: lobbies
    description: Multiplayer lobby management

paths:
  ##### users #####

  /v1/users/me:
    get:
      operationId: getPrivateProfile
      summary: Get current user profile
      description: Retrieve authenticated user profile details
      tags: ["users"]
      x-ogen-operation-group: Users
      responses:
        "200":
          description: User profile details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPrivateProfile"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
    patch:
      operationId: updateUser
      summary: Update user
      description: Update authenticated user's profile information
      tags: ["users"]
      x-ogen-operation-group: Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "204":
          description: Profile updated successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/users/{id}:
    get:
      operationId: getPublicProfile
      summary: Get user by ID
      description: Retrieve public user profile by ID
      tags: ["users"]
      x-ogen-operation-group: Users
      parameters:
        - $ref: "#/components/parameters/idInt"
      responses:
        "200":
          description: User profile details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPublicProfile"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/users/avatar:
    put:
      operationId: updateUserAvatar
      summary: Update user avatar
      description: Upload a new avatar image (max 2MB)
      tags: ["users"]
      x-ogen-operation-group: Users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - avatarFile
              properties:
                avatarFile:
                  type: string
                  format: binary
                  maxLength: 2097152 # 2 MB
                  description: Image file
      responses:
        "204":
          description: Avatar updated successfully
        "401":
          $ref: "#/components/responses/Unauthorized"
        "413":
          description: File exceeds size limit
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        "429":
          $ref: "#/components/responses/RateLimited"
        "500":
          $ref: "#/components/responses/ServerError"

  ##### auth #####

  /v1/auth/register:
    post:
      operationId: register
      summary: Register new user
      description: Register new user
      security: []
      tags: ["auth"]
      x-ogen-operation-group: Auth
      parameters:
        - in: header
          name: X-Captcha-Token
          description: Captcha token, required only for production environment
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterReq"
      responses:
        "201":
          description: User created successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: Username already exists
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/login:
    post:
      operationId: login
      summary: Login user
      description: Login user
      security: []
      tags: ["auth"]
      x-ogen-operation-group: Auth
      parameters:
        - in: header
          name: User-Agent
          required: true
          schema:
            type: string
        - in: header
          name: X-Captcha-Token
          description: Captcha token, required only for production environment
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginReq"
      responses:
        "204":
          description: OK
          headers:
            Set-Cookie:
              required: true
              description: >
                HTTP-only, Secure cookies containing JWT tokens.
                accessToken: Short-lived session token
                refreshToken: Long-lived renewal token
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/tokens/refresh:
    post:
      operationId: refreshTokens
      summary: Get new refresh and access tokens
      description: Get new refresh and access tokens
      security: []
      tags: ["auth"]
      x-ogen-operation-group: Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        "204":
          description: OK
          headers:
            Set-Cookie:
              required: true
              description: Access and refresh JWT tokens (accessToken, refreshToken)
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/sessions:
    get:
      operationId: getUserSessions
      summary: User sessions
      description: Get user sessions
      tags: ["auth"]
      x-ogen-operation-group: Auth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/UserSession"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/sessions/{id}:
    delete:
      operationId: deleteUserSession
      summary: Delete user session
      description: Delete user session
      tags: ["auth"]
      x-ogen-operation-group: Auth
      parameters:
        - $ref: "#/components/parameters/idStr"
      responses:
        "204":
          description: OK
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/providers:
    get:
      operationId: getOAuthProviders
      summary: Get all connected OAuth providers
      description: Get all connected OAuth providers
      tags: ["auth"]
      x-ogen-operation-group: Auth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuthProvider"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/yandex/login:
    get:
      operationId: yandexLogin
      summary: Yandex login
      description: Log in using Yandex OAuth
      security: []
      tags: ["auth"]
      x-ogen-operation-group: Auth
      responses:
        "307":
          description: Redirect to Yandex OAuth page
          headers:
            Location:
              required: true
              description: Yandex OAuth page URL
              schema:
                type: string
            Set-Cookie:
              required: true
              description: OAuth state cookie (oauthState)
              schema:
                type: string

  /v1/auth/yandex/login/callback:
    get:
      operationId: yandexLoginCallback
      summary: Yandex login callback
      description: A callback for Yandex OAuth login
      security: []
      tags: ["auth"]
      x-ogen-operation-group: Auth
      parameters:
        - in: header
          name: Cookie
          description: OAuth state cookie (oauthState)
          required: true
          schema:
            type: string
        - in: query
          name: code
          description: Yandex OAuth code
          required: true
          schema:
            type: string
        - in: query
          name: state
          description: Yandex OAuth state
          required: true
          schema:
            type: string
      responses:
        "307":
          description: Redirect to Segoya login page
          headers:
            Location:
              required: true
              description: Segoya login page URL
              schema:
                type: string
            Set-Cookie:
              required: true
              description: Access and refresh JWT tokens (accessToken, refreshToken)
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/yandex/new:
    get:
      operationId: newYandex
      summary: New Yandex auth
      description: Create Yandex OAuth connection
      tags: ["auth"]
      x-ogen-operation-group: Auth
      responses:
        "307":
          description: Redirect to Yandex OAuth page
          headers:
            Location:
              required: true
              description: Yandex OAuth page URL
              schema:
                type: string
            Set-Cookie:
              required: true
              description: OAuth state cookie (oauthState)
              schema:
                type: string
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/yandex/new/callback:
    get:
      operationId: newYandexCallback
      summary: New Yandex auth callback
      description: A callback for new Yandex OAuth
      security: []
      tags: ["auth"]
      x-ogen-operation-group: Auth
      parameters:
        - in: header
          name: Cookie
          description: OAuth state cookie (oauthState)
          required: true
          schema:
            type: string
        - in: query
          name: code
          description: Yandex OAuth code
          required: true
          schema:
            type: string
        - in: query
          name: state
          description: Yandex OAuth state
          required: true
          schema:
            type: string
      responses:
        "307":
          description: Redirect to Segoya profile page
          headers:
            Location:
              required: true
              description: Segoya profile page URL
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/yandex:
    delete:
      operationId: deleteYandex
      summary: Delete Yandex auth
      description: Delete login with Yandex OAuth
      tags: ["auth"]
      x-ogen-operation-group: Auth
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/discord/login:
    get:
      operationId: discordLogin
      summary: Discord login
      description: Log in using Discord OAuth
      security: []
      tags: ["auth"]
      x-ogen-operation-group: Auth
      responses:
        "307":
          description: Redirect to Discord OAuth page
          headers:
            Location:
              required: true
              description: Discord OAuth page URL
              schema:
                type: string
            Set-Cookie:
              required: true
              description: OAuth state cookie (oauthState)
              schema:
                type: string

  /v1/auth/discord/login/callback:
    get:
      operationId: discordLoginCallback
      summary: Discord login callback
      description: A callback for Discord OAuth login
      security: []
      tags: ["auth"]
      x-ogen-operation-group: Auth
      parameters:
        - in: header
          name: Cookie
          description: OAuth state cookie (oauthState)
          required: true
          schema:
            type: string
        - in: query
          name: code
          description: Discord OAuth code
          required: true
          schema:
            type: string
        - in: query
          name: state
          description: Discord OAuth state
          required: true
          schema:
            type: string
      responses:
        "307":
          description: Redirect to Segoya login page
          headers:
            Location:
              required: true
              description: Segoya login page URL
              schema:
                type: string
            Set-Cookie:
              required: true
              description: Access and refresh JWT tokens (accessToken, refreshToken)
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/discord/new:
    get:
      operationId: newDiscord
      summary: New Discord auth
      description: Create Discord OAuth connection
      tags: ["auth"]
      x-ogen-operation-group: Auth
      responses:
        "307":
          description: Redirect to Discord OAuth page
          headers:
            Location:
              required: true
              description: Discord OAuth page URL
              schema:
                type: string
            Set-Cookie:
              required: true
              description: OAuth state cookie (oauthState)
              schema:
                type: string
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/discord/new/callback:
    get:
      operationId: newDiscordCallback
      summary: Discord new auth callback
      description: A callback for new Discord OAuth
      security: []
      tags: ["auth"]
      x-ogen-operation-group: Auth
      parameters:
        - in: header
          name: Cookie
          description: OAuth state cookie (oauthState)
          required: true
          schema:
            type: string
        - in: query
          name: code
          description: Discord OAuth code
          required: true
          schema:
            type: string
        - in: query
          name: state
          description: Discord OAuth state
          required: true
          schema:
            type: string
      responses:
        "307":
          description: Redirect to Segoya profile page
          headers:
            Location:
              required: true
              description: Segoya profile page URL
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/auth/discord:
    delete:
      operationId: deleteDiscord
      summary: Delete Discord auth
      description: Delete login with Discord OAuth
      tags: ["auth"]
      x-ogen-operation-group: Auth
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"

  ##### lobbies #####

  /v1/lobbies:
    get:
      operationId: getLobbies
      summary: Get available lobbies
      description: Get all available lobbies
      tags: ["lobbies"]
      x-ogen-operation-group: Lobbies
      parameters:
        - $ref: "#/components/parameters/pageQuery"
        - $ref: "#/components/parameters/pageSizeQuery"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LobbiesResponse"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      operationId: newLobby
      summary: Create new lobby
      description: Create new lobby
      tags: ["lobbies"]
      x-ogen-operation-group: Lobbies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewLobby"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                required:
                  - id
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/lobbies/{id}:
    get:
      operationId: getLobby
      summary: Get lobby by ID
      description: Get lobby information by ID
      tags: ["lobbies"]
      x-ogen-operation-group: Lobbies
      parameters:
        - $ref: "#/components/parameters/idStr"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Lobby"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  ##### singleplayer #####

  /v1/singleplayer:
    get:
      operationId: getSingleplayerGames
      summary: Get all singleplayer user games
      description: Get all singleplayer user games
      tags: ["singleplayer"]
      x-ogen-operation-group: Singleplayer
      parameters:
        - $ref: "#/components/parameters/pageQuery"
        - $ref: "#/components/parameters/pageSizeQuery"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleplayerGames"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      operationId: newSingleplayerGame
      summary: Create new singleplayer game
      description: Create new singleplayer game
      tags: ["singleplayer"]
      x-ogen-operation-group: Singleplayer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewSingleplayerGameReq"
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                required:
                  - id
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/singleplayer/{id}:
    get:
      operationId: getSingleplayerGame
      summary: Get singleplayer game by ID
      description: Get singleplayer game information by ID
      tags: ["singleplayer"]
      x-ogen-operation-group: Singleplayer
      parameters:
        - $ref: "#/components/parameters/idInt"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleplayerGame"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/singleplayer/{id}/end:
    post:
      operationId: endSingleplayerGame
      summary: End singleplayer game
      description: End singleplayer game
      tags: ["singleplayer"]
      x-ogen-operation-group: Singleplayer
      parameters:
        - $ref: "#/components/parameters/idInt"
      responses:
        "204":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/singleplayer/{id}/round:
    get:
      operationId: getSingleplayerRound
      summary: Get singleplayer game round
      description: Get singleplayer game round
      tags: ["singleplayer"]
      x-ogen-operation-group: Singleplayer
      parameters:
        - $ref: "#/components/parameters/idInt"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleplayerRoundResp"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      operationId: newSingleplayerRound
      summary: Create singleplayer game round
      description: Create singleplayer game round
      tags: ["singleplayer"]
      x-ogen-operation-group: Singleplayer
      parameters:
        - $ref: "#/components/parameters/idInt"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SingleplayerRoundResp"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/singleplayer/{id}/round/end:
    post:
      operationId: endSingleplayerRound
      summary: End singleplayer game round
      description: End singleplayer game round
      tags: ["singleplayer"]
      x-ogen-operation-group: Singleplayer
      parameters:
        - $ref: "#/components/parameters/idInt"
      requestBody:
        required: true
        description: Round guess
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SingleplayerRoundGuess"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EndSingleplayerRoundResp"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/singleplayer/{id}/rounds:
    get:
      operationId: getSingleplayerGameRounds
      summary: Get singleplayer game rounds
      description: Get singleplayer game rounds
      tags: ["singleplayer"]
      x-ogen-operation-group: Singleplayer
      parameters:
        - $ref: "#/components/parameters/idInt"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SingleplayerRoundsWithGuess"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          description: Singleplayer game not found
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  ##### multiplayer #####

  /v1/multiplayer/{id}:
    get:
      operationId: getMultiplayerGame
      summary: Get multiplayer game by ID
      description: Get multiplayer game information by ID
      tags: ["multiplayer"]
      x-ogen-operation-group: Multiplayer
      parameters:
        - $ref: "#/components/parameters/idInt"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiplayerGame"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/multiplayer/{id}/round:
    get:
      operationId: getMultiplayerRound
      summary: Get multiplayer game round
      description: Get multiplayer game round
      tags: ["multiplayer"]
      x-ogen-operation-group: Multiplayer
      parameters:
        - $ref: "#/components/parameters/idInt"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiplayerRound"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      operationId: newMultiplayerRound
      summary: Get or generate multiplayer game round
      description: Get or generate multiplayer game round
      tags: ["multiplayer"]
      x-ogen-operation-group: Multiplayer
      parameters:
        - $ref: "#/components/parameters/idInt"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MultiplayerRound"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /v1/multiplayer/{id}/guesses:
    get:
      operationId: getMultiplayerGameGuesses
      summary: Get multiplayer game guesses
      description: Get multiplayer game user guesses
      tags: ["multiplayer"]
      x-ogen-operation-group: Multiplayer
      parameters:
        - $ref: "#/components/parameters/idInt"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MultiplayerGuess"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/ServerError"

components:
  securitySchemes:
    Bearer:
      description: >
        JWT authentication. Format: `Authorization: Bearer <access-token>`.
        Token can be obtained from `/v1/auth/login`
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    idInt:
      name: id
      description: Numeric ID of the resource in path
      in: path
      required: true
      schema:
        type: integer
    idStr:
      name: id
      description: String ID of the resource in path
      in: path
      required: true
      schema:
        type: string
    pageQuery:
      name: page
      in: query
      description: Page number in the query
      required: true
      schema:
        type: integer
        minimum: 1
    pageSizeQuery:
      name: page-size
      in: query
      description: Page size in the query
      required: true
      schema:
        type: integer
        minimum: 1
        maximum: 50
  responses:
    BadRequest:
      description: Invalid request parameters
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Missing or invalid authentication
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: Requested resource not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    ServerError:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    RateLimited:
      description: Too many requests
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Error:
      title: Error Object
      description: An RFC 7807/RFC 9457 application/problem+json object
      type: object
      properties:
        title:
          type: string
          description: A short, human-readable summary of the problem type.
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 100
          maximum: 599
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
      required: [title, status, detail]
    Provider:
      type: string
      enum: ["google", "yandex", "yandex_air", "seznam"]
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 20
    UserPublicProfile:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        name:
          type: string
        avatarHash:
          type: string
        registerDate:
          type: string
          format: date-time
      required: [id, username, name, avatarHash, registerDate]
    UserPrivateProfile:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        name:
          type: string
        avatarHash:
          type: string
        registerDate:
          type: string
          format: date-time
        yandexConnected:
          type: boolean
        discordConnected:
          type: boolean
      required:
        [
          id,
          username,
          name,
          avatarHash,
          registerDate,
          yandexConnected,
          discordConnected,
        ]
    UserSession:
      type: object
      properties:
        sessionID:
          type: string
        userID:
          type: integer
        refreshToken:
          type: string
        ua:
          type: string
        lastActive:
          type: string
          format: date-time
      required: [sessionID, userID, refreshToken, ua, lastActive]
    SingleplayerGame:
      type: object
      properties:
        id:
          type: integer
        userID:
          type: integer
        rounds:
          type: integer
        roundCurrent:
          type: integer
        timerSeconds:
          type: integer
        movementAllowed:
          type: boolean
        provider:
          $ref: "#/components/schemas/Provider"
        score:
          type: integer
        finished:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        [
          id,
          userID,
          rounds,
          roundCurrent,
          timerSeconds,
          movementAllowed,
          provider,
          score,
          finished,
          createdAt,
        ]
    SingleplayerGames:
      type: object
      properties:
        total:
          type: integer
        games:
          type: array
          items:
            $ref: "#/components/schemas/SingleplayerGame"
      required: [total, games]
    LobbiesResponse:
      type: object
      properties:
        total:
          type: integer
        lobbies:
          type: array
          items:
            $ref: "#/components/schemas/Lobby"
      required: [total, lobbies]
    NewSingleplayerGameReq:
      type: object
      properties:
        rounds:
          type: integer
          minimum: 1
          maximum: 10
        timerSeconds:
          type: integer
          minimum: 10
          maximum: 600
        movementAllowed:
          type: boolean
        provider:
          $ref: "#/components/schemas/Provider"
      required: [rounds, movementAllowed, provider]
    Lobby:
      type: object
      properties:
        id:
          type: string
        creatorID:
          type: integer
        createdAt:
          type: string
          format: date-time
        rounds:
          type: integer
        provider:
          $ref: "#/components/schemas/Provider"
        movementAllowed:
          type: boolean
        timerSeconds:
          type: integer
        currentPlayers:
          type: integer
        maxPlayers:
          type: integer
      required:
        [
          id,
          creatorID,
          createdAt,
          rounds,
          provider,
          movementAllowed,
          timerSeconds,
          currentPlayers,
          maxPlayers,
        ]
    NewLobby:
      type: object
      properties:
        creatorID:
          type: integer
        maxPlayers:
          type: integer
          minimum: 2
          maximum: 10
        rounds:
          type: integer
          minimum: 1
          maximum: 10
        provider:
          $ref: "#/components/schemas/Provider"
        timerSeconds:
          type: integer
          minimum: 10
          maximum: 600
        movementAllowed:
          type: boolean
      required: [creatorID, maxPlayers, rounds, provider, movementAllowed]
    AuthProvider:
      type: object
      properties:
        provider:
          type: string
        createdAt:
          type: string
          format: date-time
      required: [provider, createdAt]
    LoginReq:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
        password:
          type: string
          minLength: 5
          maxLength: 20
      required: [username, password]
    RegisterReq:
      type: object
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 20
        password:
          type: string
          minLength: 5
          maxLength: 20
        name:
          type: string
          minLength: 3
          maxLength: 20
      required: [username, password]
    SingleplayerRoundResp:
      type: object
      properties:
        id:
          type: integer
        gameID:
          type: integer
        streetviewID:
          type: string
        roundNum:
          type: integer
        lat:
          type: number
        lng:
          type: number
        panoramaURL:
          type: string
        finished:
          type: boolean
        createdAt:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
      required:
        [
          id,
          gameID,
          streetviewID,
          roundNum,
          lat,
          lng,
          panoramaURL,
          finished,
          createdAt,
          startedAt,
        ]
    SingleplayerRoundsWithGuess:
      type: object
      properties:
        roundNum:
          type: integer
        roundLat:
          type: number
        roundLng:
          type: number
        guessLat:
          type: number
        guessLng:
          type: number
        score:
          type: integer
        missDistance:
          type: integer
      required:
        [roundNum, roundLat, roundLng, guessLat, guessLng, score, missDistance]
    EndSingleplayerRoundResp:
      type: object
      properties:
        score:
          type: integer
        distance:
          type: integer
      required: [score, distance]
    LatLng:
      type: object
      properties:
        lat:
          type: number
          minimum: -90
          maximum: 90
        lng:
          type: number
          minimum: -180
          maximum: 180
      required: [lat, lng]
    SingleplayerRoundGuess:
      type: object
      properties:
        guess:
          $ref: "#/components/schemas/LatLng"
      required: [guess]
    MultiplayerRound:
      type: object
      properties:
        id:
          type: integer
        gameID:
          type: integer
        streetviewID:
          type: string
        roundNum:
          type: integer
        lat:
          type: number
        lng:
          type: number
        panoramaURL:
          type: string
        guessesCount:
          type: integer
        finished:
          type: boolean
        createdAt:
          type: string
          format: date-time
        startedAt:
          type: string
          format: date-time
        endedAt:
          type: string
          format: date-time
      required:
        [
          id,
          gameID,
          streetviewID,
          roundNum,
          lat,
          lng,
          panoramaURL,
          guessesCount,
          finished,
          createdAt,
          startedAt,
          endedAt,
        ]
    MultiplayerGame:
      type: object
      properties:
        id:
          type: integer
        creatorID:
          type: integer
        rounds:
          type: integer
        roundCurrent:
          type: integer
        timerSeconds:
          type: integer
        movementAllowed:
          type: boolean
        players:
          type: integer
        provider:
          $ref: "#/components/schemas/Provider"
        finished:
          type: boolean
        createdAt:
          type: string
          format: date-time
      required:
        [
          id,
          creatorID,
          rounds,
          roundCurrent,
          timerSeconds,
          movementAllowed,
          players,
          provider,
          finished,
          createdAt,
        ]
    MultiplayerGuess:
      type: object
      properties:
        username:
          type: string
        avatarHash:
          type: string
        roundNum:
          type: integer
        roundLat:
          type: number
        roundLng:
          type: number
        lat:
          type: number
        lng:
          type: number
        score:
          type: integer
      required:
        [username, avatarHash, roundNum, roundLat, roundLng, lat, lng, score]
