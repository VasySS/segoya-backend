// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// DeleteDiscord implements deleteDiscord operation.
//
// Delete login with Discord OAuth.
//
// DELETE /v1/auth/discord
func (UnimplementedHandler) DeleteDiscord(ctx context.Context) (r DeleteDiscordRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteUserSession implements deleteUserSession operation.
//
// Delete user session.
//
// DELETE /v1/auth/sessions/{id}
func (UnimplementedHandler) DeleteUserSession(ctx context.Context, params DeleteUserSessionParams) (r DeleteUserSessionRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteYandex implements deleteYandex operation.
//
// Delete login with Yandex OAuth.
//
// DELETE /v1/auth/yandex
func (UnimplementedHandler) DeleteYandex(ctx context.Context) (r DeleteYandexRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DiscordLogin implements discordLogin operation.
//
// Log in using Discord OAuth.
//
// GET /v1/auth/discord/login
func (UnimplementedHandler) DiscordLogin(ctx context.Context) (r *DiscordLoginTemporaryRedirect, _ error) {
	return r, ht.ErrNotImplemented
}

// DiscordLoginCallback implements discordLoginCallback operation.
//
// A callback for Discord OAuth login.
//
// GET /v1/auth/discord/login/callback
func (UnimplementedHandler) DiscordLoginCallback(ctx context.Context, params DiscordLoginCallbackParams) (r DiscordLoginCallbackRes, _ error) {
	return r, ht.ErrNotImplemented
}

// EndSingleplayerGame implements endSingleplayerGame operation.
//
// End singleplayer game.
//
// POST /v1/singleplayer/{id}/end
func (UnimplementedHandler) EndSingleplayerGame(ctx context.Context, params EndSingleplayerGameParams) (r EndSingleplayerGameRes, _ error) {
	return r, ht.ErrNotImplemented
}

// EndSingleplayerRound implements endSingleplayerRound operation.
//
// End singleplayer game round.
//
// POST /v1/singleplayer/{id}/round/end
func (UnimplementedHandler) EndSingleplayerRound(ctx context.Context, req *SingleplayerRoundGuess, params EndSingleplayerRoundParams) (r EndSingleplayerRoundRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetHealth implements getHealth operation.
//
// Check API health.
//
// GET /health
func (UnimplementedHandler) GetHealth(ctx context.Context) (r *GetHealthOK, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLobbies implements getLobbies operation.
//
// Get all available lobbies.
//
// GET /v1/lobbies
func (UnimplementedHandler) GetLobbies(ctx context.Context, params GetLobbiesParams) (r GetLobbiesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetLobby implements getLobby operation.
//
// Get lobby information by ID.
//
// GET /v1/lobbies/{id}
func (UnimplementedHandler) GetLobby(ctx context.Context, params GetLobbyParams) (r GetLobbyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMultiplayerGame implements getMultiplayerGame operation.
//
// Get multiplayer game information by ID.
//
// GET /v1/multiplayer/{id}
func (UnimplementedHandler) GetMultiplayerGame(ctx context.Context, params GetMultiplayerGameParams) (r GetMultiplayerGameRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMultiplayerGameGuesses implements getMultiplayerGameGuesses operation.
//
// Get multiplayer game user guesses.
//
// GET /v1/multiplayer/{id}/guesses
func (UnimplementedHandler) GetMultiplayerGameGuesses(ctx context.Context, params GetMultiplayerGameGuessesParams) (r GetMultiplayerGameGuessesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetMultiplayerRound implements getMultiplayerRound operation.
//
// Get multiplayer game round.
//
// GET /v1/multiplayer/{id}/round
func (UnimplementedHandler) GetMultiplayerRound(ctx context.Context, params GetMultiplayerRoundParams) (r GetMultiplayerRoundRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetOAuthProviders implements getOAuthProviders operation.
//
// Get all connected OAuth providers.
//
// GET /v1/auth/providers
func (UnimplementedHandler) GetOAuthProviders(ctx context.Context) (r GetOAuthProvidersRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPrivateProfile implements getPrivateProfile operation.
//
// Retrieve authenticated user profile details.
//
// GET /v1/users/me
func (UnimplementedHandler) GetPrivateProfile(ctx context.Context) (r GetPrivateProfileRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPublicProfile implements getPublicProfile operation.
//
// Retrieve public user profile by ID.
//
// GET /v1/users/{id}
func (UnimplementedHandler) GetPublicProfile(ctx context.Context, params GetPublicProfileParams) (r GetPublicProfileRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetRoot implements getRoot operation.
//
// Redirect to documentation.
//
// GET /
func (UnimplementedHandler) GetRoot(ctx context.Context) (r *GetRootFound, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSingleplayerGame implements getSingleplayerGame operation.
//
// Get singleplayer game information by ID.
//
// GET /v1/singleplayer/{id}
func (UnimplementedHandler) GetSingleplayerGame(ctx context.Context, params GetSingleplayerGameParams) (r GetSingleplayerGameRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSingleplayerGameRounds implements getSingleplayerGameRounds operation.
//
// Get singleplayer game rounds.
//
// GET /v1/singleplayer/{id}/rounds
func (UnimplementedHandler) GetSingleplayerGameRounds(ctx context.Context, params GetSingleplayerGameRoundsParams) (r GetSingleplayerGameRoundsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSingleplayerGames implements getSingleplayerGames operation.
//
// Get all singleplayer user games.
//
// GET /v1/singleplayer
func (UnimplementedHandler) GetSingleplayerGames(ctx context.Context, params GetSingleplayerGamesParams) (r GetSingleplayerGamesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSingleplayerRound implements getSingleplayerRound operation.
//
// Get singleplayer game round.
//
// GET /v1/singleplayer/{id}/round
func (UnimplementedHandler) GetSingleplayerRound(ctx context.Context, params GetSingleplayerRoundParams) (r GetSingleplayerRoundRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetUserSessions implements getUserSessions operation.
//
// Get user sessions.
//
// GET /v1/auth/sessions
func (UnimplementedHandler) GetUserSessions(ctx context.Context) (r GetUserSessionsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Login implements login operation.
//
// Login user.
//
// POST /v1/auth/login
func (UnimplementedHandler) Login(ctx context.Context, req *LoginRequest, params LoginParams) (r LoginRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewDiscord implements newDiscord operation.
//
// Create Discord OAuth connection.
//
// GET /v1/auth/discord/new
func (UnimplementedHandler) NewDiscord(ctx context.Context) (r NewDiscordRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewDiscordCallback implements newDiscordCallback operation.
//
// A callback for new Discord OAuth.
//
// GET /v1/auth/discord/new/callback
func (UnimplementedHandler) NewDiscordCallback(ctx context.Context, params NewDiscordCallbackParams) (r NewDiscordCallbackRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewLobby implements newLobby operation.
//
// Create new lobby.
//
// POST /v1/lobbies
func (UnimplementedHandler) NewLobby(ctx context.Context, req *NewLobby) (r NewLobbyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewMultiplayerRound implements newMultiplayerRound operation.
//
// Get or generate multiplayer game round.
//
// POST /v1/multiplayer/{id}/round
func (UnimplementedHandler) NewMultiplayerRound(ctx context.Context, params NewMultiplayerRoundParams) (r NewMultiplayerRoundRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewSingleplayerGame implements newSingleplayerGame operation.
//
// Create new singleplayer game.
//
// POST /v1/singleplayer
func (UnimplementedHandler) NewSingleplayerGame(ctx context.Context, req *NewSingleplayerGameRequest) (r NewSingleplayerGameRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewSingleplayerRound implements newSingleplayerRound operation.
//
// Create singleplayer game round.
//
// POST /v1/singleplayer/{id}/round
func (UnimplementedHandler) NewSingleplayerRound(ctx context.Context, params NewSingleplayerRoundParams) (r NewSingleplayerRoundRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewYandex implements newYandex operation.
//
// Create Yandex OAuth connection.
//
// GET /v1/auth/yandex/new
func (UnimplementedHandler) NewYandex(ctx context.Context) (r NewYandexRes, _ error) {
	return r, ht.ErrNotImplemented
}

// NewYandexCallback implements newYandexCallback operation.
//
// A callback for new Yandex OAuth.
//
// GET /v1/auth/yandex/new/callback
func (UnimplementedHandler) NewYandexCallback(ctx context.Context, params NewYandexCallbackParams) (r NewYandexCallbackRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RefreshTokens implements refreshTokens operation.
//
// Get new refresh and access tokens.
//
// POST /v1/auth/tokens/refresh
func (UnimplementedHandler) RefreshTokens(ctx context.Context, req *RefreshTokensReq) (r RefreshTokensRes, _ error) {
	return r, ht.ErrNotImplemented
}

// Register implements register operation.
//
// Register new user.
//
// POST /v1/auth/register
func (UnimplementedHandler) Register(ctx context.Context, req *RegisterRequest, params RegisterParams) (r RegisterRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateUser implements updateUser operation.
//
// Update authenticated user's profile information.
//
// PATCH /v1/users/me
func (UnimplementedHandler) UpdateUser(ctx context.Context, req *UserUpdateRequest) (r UpdateUserRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateUserAvatar implements updateUserAvatar operation.
//
// Upload a new avatar image (max 2MB).
//
// PUT /v1/users/avatar
func (UnimplementedHandler) UpdateUserAvatar(ctx context.Context, req *UpdateUserAvatarReq) (r UpdateUserAvatarRes, _ error) {
	return r, ht.ErrNotImplemented
}

// YandexLogin implements yandexLogin operation.
//
// Log in using Yandex OAuth.
//
// GET /v1/auth/yandex/login
func (UnimplementedHandler) YandexLogin(ctx context.Context) (r *YandexLoginTemporaryRedirect, _ error) {
	return r, ht.ErrNotImplemented
}

// YandexLoginCallback implements yandexLoginCallback operation.
//
// A callback for Yandex OAuth login.
//
// GET /v1/auth/yandex/login/callback
func (UnimplementedHandler) YandexLoginCallback(ctx context.Context, params YandexLoginCallbackParams) (r YandexLoginCallbackRes, _ error) {
	return r, ht.ErrNotImplemented
}
