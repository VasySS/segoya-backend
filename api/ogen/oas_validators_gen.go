// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *DeleteDiscordInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteDiscordUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteYandexInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DeleteYandexUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DiscordLoginCallbackBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DiscordLoginCallbackInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *DiscordLoginCallbackNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EndSingleplayerGameBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EndSingleplayerGameForbidden) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EndSingleplayerGameInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EndSingleplayerGameNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EndSingleplayerGameUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EndSingleplayerRoundBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EndSingleplayerRoundForbidden) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EndSingleplayerRoundInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EndSingleplayerRoundNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *EndSingleplayerRoundUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *Error) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           100,
			MaxSet:        true,
			Max:           599,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.Status)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetLobbyInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetLobbyNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetMultiplayerGameGuessesBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetMultiplayerGameGuessesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s GetMultiplayerGameGuessesOKApplicationJSON) Validate() error {
	alias := ([]MultiplayerGuess)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetMultiplayerGameInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetMultiplayerGameNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetMultiplayerGameUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetMultiplayerRoundInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetMultiplayerRoundNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetMultiplayerRoundUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetOAuthProvidersInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s GetOAuthProvidersOKApplicationJSON) Validate() error {
	alias := ([]AuthProvider)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *GetOAuthProvidersUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPrivateProfileInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPrivateProfileUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPublicProfileInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetPublicProfileNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGameForbidden) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGameInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGameNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGameRoundsBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGameRoundsForbidden) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGameRoundsInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGameRoundsNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s GetSingleplayerGameRoundsOKApplicationJSON) Validate() error {
	alias := ([]SingleplayerRoundsWithGuess)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GetSingleplayerGameRoundsUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGameUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGamesBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGamesInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerGamesUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerRoundBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerRoundForbidden) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerRoundInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerRoundNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *GetSingleplayerRoundUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s GetUserSessionsOKApplicationJSON) Validate() error {
	alias := ([]GetUserSessionsOKItem)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *LatLng) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{
			MinSet:        true,
			Min:           -90,
			MaxSet:        true,
			Max:           90,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    nil,
		}).Validate(float64(s.Lat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lat",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{
			MinSet:        true,
			Min:           -180,
			MaxSet:        true,
			Max:           180,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    nil,
		}).Validate(float64(s.Lng)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lng",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LobbiesResponse) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Lobbies == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Lobbies {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lobbies",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Lobby) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Provider.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "provider",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LoginBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *LoginInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *LoginRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    3,
			MinLengthSet: true,
			MaxLength:    20,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Username)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "username",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    5,
			MinLengthSet: true,
			MaxLength:    20,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Password)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "password",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *LoginUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *MultiplayerGame) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Provider.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "provider",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MultiplayerGuess) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RoundLat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "roundLat",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RoundLng)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "roundLng",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Lat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lat",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Lng)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lng",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *MultiplayerRound) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Lat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lat",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Lng)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lng",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *NewDiscordCallbackBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewDiscordCallbackInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewDiscordCallbackUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewLobby) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           2,
			MaxSet:        true,
			Max:           10,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.MaxPlayers)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maxPlayers",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           1,
			MaxSet:        true,
			Max:           10,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.Rounds)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rounds",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Provider.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "provider",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TimerSeconds.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           600,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "timerSeconds",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *NewLobbyBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewLobbyInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewMultiplayerRoundInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewMultiplayerRoundNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewMultiplayerRoundUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewSingleplayerGameBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewSingleplayerGameInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewSingleplayerGameRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Int{
			MinSet:        true,
			Min:           1,
			MaxSet:        true,
			Max:           10,
			MinExclusive:  false,
			MaxExclusive:  false,
			MultipleOfSet: false,
			MultipleOf:    0,
		}).Validate(int64(s.Rounds)); err != nil {
			return errors.Wrap(err, "int")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "rounds",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TimerSeconds.Get(); ok {
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           10,
					MaxSet:        true,
					Max:           600,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(value)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "timerSeconds",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Provider.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "provider",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *NewSingleplayerGameUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewSingleplayerRoundBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewSingleplayerRoundForbidden) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewSingleplayerRoundInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewSingleplayerRoundNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewSingleplayerRoundUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewYandexCallbackBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewYandexCallbackInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *NewYandexCallbackUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s Provider) Validate() error {
	switch s {
	case "google":
		return nil
	case "yandex":
		return nil
	case "yandex_air":
		return nil
	case "seznam":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *RefreshTokensBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RefreshTokensInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RegisterBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RegisterConflict) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RegisterInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *RegisterRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.String{
			MinLength:    3,
			MinLengthSet: true,
			MaxLength:    20,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Username)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "username",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.String{
			MinLength:    5,
			MinLengthSet: true,
			MaxLength:    20,
			MaxLengthSet: true,
			Email:        false,
			Hostname:     false,
			Regex:        nil,
		}).Validate(string(s.Password)); err != nil {
			return errors.Wrap(err, "string")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "password",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SingleplayerGame) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Provider.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "provider",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SingleplayerGames) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if s.Games == nil {
			return errors.New("nil is invalid value")
		}
		var failures []validate.FieldError
		for i, elem := range s.Games {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "games",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SingleplayerRound) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Lat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lat",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.Lng)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "lng",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SingleplayerRoundGuess) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Guess.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "guess",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SingleplayerRoundsWithGuess) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RoundLat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "roundLat",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.RoundLng)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "roundLng",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.GuessLat)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "guessLat",
			Error: err,
		})
	}
	if err := func() error {
		if err := (validate.Float{}).Validate(float64(s.GuessLng)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "guessLng",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *UpdateUserAvatarInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateUserAvatarRequestEntityTooLarge) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateUserAvatarTooManyRequests) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateUserAvatarUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateUserInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UpdateUserUnauthorized) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *UserUpdateRequest) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Name.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    3,
					MinLengthSet: true,
					MaxLength:    20,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "name",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *YandexLoginCallbackBadRequest) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *YandexLoginCallbackInternalServerError) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}

func (s *YandexLoginCallbackNotFound) Validate() error {
	alias := (*Error)(s)
	if err := alias.Validate(); err != nil {
		return err
	}
	return nil
}
