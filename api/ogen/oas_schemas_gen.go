// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"

	ht "github.com/ogen-go/ogen/http"
)

// Ref: #/AuthProvider
type AuthProvider struct {
	Provider  string    `json:"provider"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetProvider returns the value of Provider.
func (s *AuthProvider) GetProvider() string {
	return s.Provider
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AuthProvider) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetProvider sets the value of Provider.
func (s *AuthProvider) SetProvider(val string) {
	s.Provider = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AuthProvider) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

type Bearer struct {
	Token string
}

// GetToken returns the value of Token.
func (s *Bearer) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *Bearer) SetToken(val string) {
	s.Token = val
}

type DeleteDiscordInternalServerError Error

func (*DeleteDiscordInternalServerError) deleteDiscordRes() {}

// DeleteDiscordNoContent is response for DeleteDiscord operation.
type DeleteDiscordNoContent struct{}

func (*DeleteDiscordNoContent) deleteDiscordRes() {}

type DeleteDiscordUnauthorized Error

func (*DeleteDiscordUnauthorized) deleteDiscordRes() {}

// DeleteUserSessionNoContent is response for DeleteUserSession operation.
type DeleteUserSessionNoContent struct{}

func (*DeleteUserSessionNoContent) deleteUserSessionRes() {}

type DeleteYandexInternalServerError Error

func (*DeleteYandexInternalServerError) deleteYandexRes() {}

// DeleteYandexNoContent is response for DeleteYandex operation.
type DeleteYandexNoContent struct{}

func (*DeleteYandexNoContent) deleteYandexRes() {}

type DeleteYandexUnauthorized Error

func (*DeleteYandexUnauthorized) deleteYandexRes() {}

type DiscordLoginCallbackBadRequest Error

func (*DiscordLoginCallbackBadRequest) discordLoginCallbackRes() {}

type DiscordLoginCallbackInternalServerError Error

func (*DiscordLoginCallbackInternalServerError) discordLoginCallbackRes() {}

type DiscordLoginCallbackNotFound Error

func (*DiscordLoginCallbackNotFound) discordLoginCallbackRes() {}

// DiscordLoginCallbackTemporaryRedirect is response for DiscordLoginCallback operation.
type DiscordLoginCallbackTemporaryRedirect struct {
	Location  string
	SetCookie string
}

// GetLocation returns the value of Location.
func (s *DiscordLoginCallbackTemporaryRedirect) GetLocation() string {
	return s.Location
}

// GetSetCookie returns the value of SetCookie.
func (s *DiscordLoginCallbackTemporaryRedirect) GetSetCookie() string {
	return s.SetCookie
}

// SetLocation sets the value of Location.
func (s *DiscordLoginCallbackTemporaryRedirect) SetLocation(val string) {
	s.Location = val
}

// SetSetCookie sets the value of SetCookie.
func (s *DiscordLoginCallbackTemporaryRedirect) SetSetCookie(val string) {
	s.SetCookie = val
}

func (*DiscordLoginCallbackTemporaryRedirect) discordLoginCallbackRes() {}

// DiscordLoginTemporaryRedirect is response for DiscordLogin operation.
type DiscordLoginTemporaryRedirect struct {
	Location  string
	SetCookie string
}

// GetLocation returns the value of Location.
func (s *DiscordLoginTemporaryRedirect) GetLocation() string {
	return s.Location
}

// GetSetCookie returns the value of SetCookie.
func (s *DiscordLoginTemporaryRedirect) GetSetCookie() string {
	return s.SetCookie
}

// SetLocation sets the value of Location.
func (s *DiscordLoginTemporaryRedirect) SetLocation(val string) {
	s.Location = val
}

// SetSetCookie sets the value of SetCookie.
func (s *DiscordLoginTemporaryRedirect) SetSetCookie(val string) {
	s.SetCookie = val
}

type EndSingleplayerGameBadRequest Error

func (*EndSingleplayerGameBadRequest) endSingleplayerGameRes() {}

type EndSingleplayerGameForbidden Error

func (*EndSingleplayerGameForbidden) endSingleplayerGameRes() {}

type EndSingleplayerGameInternalServerError Error

func (*EndSingleplayerGameInternalServerError) endSingleplayerGameRes() {}

// EndSingleplayerGameNoContent is response for EndSingleplayerGame operation.
type EndSingleplayerGameNoContent struct{}

func (*EndSingleplayerGameNoContent) endSingleplayerGameRes() {}

type EndSingleplayerGameNotFound Error

func (*EndSingleplayerGameNotFound) endSingleplayerGameRes() {}

type EndSingleplayerGameUnauthorized Error

func (*EndSingleplayerGameUnauthorized) endSingleplayerGameRes() {}

type EndSingleplayerRoundBadRequest Error

func (*EndSingleplayerRoundBadRequest) endSingleplayerRoundRes() {}

type EndSingleplayerRoundForbidden Error

func (*EndSingleplayerRoundForbidden) endSingleplayerRoundRes() {}

type EndSingleplayerRoundInternalServerError Error

func (*EndSingleplayerRoundInternalServerError) endSingleplayerRoundRes() {}

type EndSingleplayerRoundNotFound Error

func (*EndSingleplayerRoundNotFound) endSingleplayerRoundRes() {}

// Ref: #/EndSingleplayerRoundResponse
type EndSingleplayerRoundResponse struct {
	Score    int `json:"score"`
	Distance int `json:"distance"`
}

// GetScore returns the value of Score.
func (s *EndSingleplayerRoundResponse) GetScore() int {
	return s.Score
}

// GetDistance returns the value of Distance.
func (s *EndSingleplayerRoundResponse) GetDistance() int {
	return s.Distance
}

// SetScore sets the value of Score.
func (s *EndSingleplayerRoundResponse) SetScore(val int) {
	s.Score = val
}

// SetDistance sets the value of Distance.
func (s *EndSingleplayerRoundResponse) SetDistance(val int) {
	s.Distance = val
}

func (*EndSingleplayerRoundResponse) endSingleplayerRoundRes() {}

type EndSingleplayerRoundUnauthorized Error

func (*EndSingleplayerRoundUnauthorized) endSingleplayerRoundRes() {}

// An RFC 7807/RFC 9457 application/problem+json object.
// Ref: #/Error
type Error struct {
	// A short, human-readable summary of the problem type.
	Title string `json:"title"`
	// The HTTP status code generated by the origin server for this occurrence of the problem.
	Status int `json:"status"`
	// A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`
}

// GetTitle returns the value of Title.
func (s *Error) GetTitle() string {
	return s.Title
}

// GetStatus returns the value of Status.
func (s *Error) GetStatus() int {
	return s.Status
}

// GetDetail returns the value of Detail.
func (s *Error) GetDetail() string {
	return s.Detail
}

// SetTitle sets the value of Title.
func (s *Error) SetTitle(val string) {
	s.Title = val
}

// SetStatus sets the value of Status.
func (s *Error) SetStatus(val int) {
	s.Status = val
}

// SetDetail sets the value of Detail.
func (s *Error) SetDetail(val string) {
	s.Detail = val
}

func (*Error) deleteUserSessionRes() {}
func (*Error) getLobbiesRes()        {}
func (*Error) getUserSessionsRes()   {}
func (*Error) newDiscordRes()        {}
func (*Error) newYandexRes()         {}

type GetHealthOK struct {
	Status string `json:"status"`
}

// GetStatus returns the value of Status.
func (s *GetHealthOK) GetStatus() string {
	return s.Status
}

// SetStatus sets the value of Status.
func (s *GetHealthOK) SetStatus(val string) {
	s.Status = val
}

type GetLobbyInternalServerError Error

func (*GetLobbyInternalServerError) getLobbyRes() {}

type GetLobbyNotFound Error

func (*GetLobbyNotFound) getLobbyRes() {}

type GetMultiplayerGameGuessesBadRequest Error

func (*GetMultiplayerGameGuessesBadRequest) getMultiplayerGameGuessesRes() {}

type GetMultiplayerGameGuessesInternalServerError Error

func (*GetMultiplayerGameGuessesInternalServerError) getMultiplayerGameGuessesRes() {}

type GetMultiplayerGameGuessesOKApplicationJSON []MultiplayerGuess

func (*GetMultiplayerGameGuessesOKApplicationJSON) getMultiplayerGameGuessesRes() {}

type GetMultiplayerGameInternalServerError Error

func (*GetMultiplayerGameInternalServerError) getMultiplayerGameRes() {}

type GetMultiplayerGameNotFound Error

func (*GetMultiplayerGameNotFound) getMultiplayerGameRes() {}

type GetMultiplayerGameUnauthorized Error

func (*GetMultiplayerGameUnauthorized) getMultiplayerGameRes() {}

type GetMultiplayerRoundInternalServerError Error

func (*GetMultiplayerRoundInternalServerError) getMultiplayerRoundRes() {}

type GetMultiplayerRoundNotFound Error

func (*GetMultiplayerRoundNotFound) getMultiplayerRoundRes() {}

type GetMultiplayerRoundUnauthorized Error

func (*GetMultiplayerRoundUnauthorized) getMultiplayerRoundRes() {}

type GetOAuthProvidersInternalServerError Error

func (*GetOAuthProvidersInternalServerError) getOAuthProvidersRes() {}

type GetOAuthProvidersOKApplicationJSON []AuthProvider

func (*GetOAuthProvidersOKApplicationJSON) getOAuthProvidersRes() {}

type GetOAuthProvidersUnauthorized Error

func (*GetOAuthProvidersUnauthorized) getOAuthProvidersRes() {}

type GetPrivateProfileInternalServerError Error

func (*GetPrivateProfileInternalServerError) getPrivateProfileRes() {}

type GetPrivateProfileUnauthorized Error

func (*GetPrivateProfileUnauthorized) getPrivateProfileRes() {}

type GetPublicProfileInternalServerError Error

func (*GetPublicProfileInternalServerError) getPublicProfileRes() {}

type GetPublicProfileNotFound Error

func (*GetPublicProfileNotFound) getPublicProfileRes() {}

// GetRootFound is response for GetRoot operation.
type GetRootFound struct {
	Location string
}

// GetLocation returns the value of Location.
func (s *GetRootFound) GetLocation() string {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *GetRootFound) SetLocation(val string) {
	s.Location = val
}

type GetSingleplayerGameForbidden Error

func (*GetSingleplayerGameForbidden) getSingleplayerGameRes() {}

type GetSingleplayerGameInternalServerError Error

func (*GetSingleplayerGameInternalServerError) getSingleplayerGameRes() {}

type GetSingleplayerGameNotFound Error

func (*GetSingleplayerGameNotFound) getSingleplayerGameRes() {}

type GetSingleplayerGameRoundsBadRequest Error

func (*GetSingleplayerGameRoundsBadRequest) getSingleplayerGameRoundsRes() {}

type GetSingleplayerGameRoundsForbidden Error

func (*GetSingleplayerGameRoundsForbidden) getSingleplayerGameRoundsRes() {}

type GetSingleplayerGameRoundsInternalServerError Error

func (*GetSingleplayerGameRoundsInternalServerError) getSingleplayerGameRoundsRes() {}

type GetSingleplayerGameRoundsNotFound Error

func (*GetSingleplayerGameRoundsNotFound) getSingleplayerGameRoundsRes() {}

type GetSingleplayerGameRoundsOKApplicationJSON []SingleplayerRoundsWithGuess

func (*GetSingleplayerGameRoundsOKApplicationJSON) getSingleplayerGameRoundsRes() {}

type GetSingleplayerGameRoundsUnauthorized Error

func (*GetSingleplayerGameRoundsUnauthorized) getSingleplayerGameRoundsRes() {}

type GetSingleplayerGameUnauthorized Error

func (*GetSingleplayerGameUnauthorized) getSingleplayerGameRes() {}

type GetSingleplayerGamesBadRequest Error

func (*GetSingleplayerGamesBadRequest) getSingleplayerGamesRes() {}

type GetSingleplayerGamesInternalServerError Error

func (*GetSingleplayerGamesInternalServerError) getSingleplayerGamesRes() {}

type GetSingleplayerGamesUnauthorized Error

func (*GetSingleplayerGamesUnauthorized) getSingleplayerGamesRes() {}

type GetSingleplayerRoundBadRequest Error

func (*GetSingleplayerRoundBadRequest) getSingleplayerRoundRes() {}

type GetSingleplayerRoundForbidden Error

func (*GetSingleplayerRoundForbidden) getSingleplayerRoundRes() {}

type GetSingleplayerRoundInternalServerError Error

func (*GetSingleplayerRoundInternalServerError) getSingleplayerRoundRes() {}

type GetSingleplayerRoundNotFound Error

func (*GetSingleplayerRoundNotFound) getSingleplayerRoundRes() {}

type GetSingleplayerRoundUnauthorized Error

func (*GetSingleplayerRoundUnauthorized) getSingleplayerRoundRes() {}

type GetUserSessionsOKApplicationJSON []GetUserSessionsOKItem

func (*GetUserSessionsOKApplicationJSON) getUserSessionsRes() {}

type GetUserSessionsOKItem struct {
	SessionID    string    `json:"sessionID"`
	UserID       int       `json:"userID"`
	RefreshToken string    `json:"refreshToken"`
	Ua           string    `json:"ua"`
	LastActive   time.Time `json:"lastActive"`
}

// GetSessionID returns the value of SessionID.
func (s *GetUserSessionsOKItem) GetSessionID() string {
	return s.SessionID
}

// GetUserID returns the value of UserID.
func (s *GetUserSessionsOKItem) GetUserID() int {
	return s.UserID
}

// GetRefreshToken returns the value of RefreshToken.
func (s *GetUserSessionsOKItem) GetRefreshToken() string {
	return s.RefreshToken
}

// GetUa returns the value of Ua.
func (s *GetUserSessionsOKItem) GetUa() string {
	return s.Ua
}

// GetLastActive returns the value of LastActive.
func (s *GetUserSessionsOKItem) GetLastActive() time.Time {
	return s.LastActive
}

// SetSessionID sets the value of SessionID.
func (s *GetUserSessionsOKItem) SetSessionID(val string) {
	s.SessionID = val
}

// SetUserID sets the value of UserID.
func (s *GetUserSessionsOKItem) SetUserID(val int) {
	s.UserID = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *GetUserSessionsOKItem) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetUa sets the value of Ua.
func (s *GetUserSessionsOKItem) SetUa(val string) {
	s.Ua = val
}

// SetLastActive sets the value of LastActive.
func (s *GetUserSessionsOKItem) SetLastActive(val time.Time) {
	s.LastActive = val
}

// Ref: #/LatLng
type LatLng struct {
	Lat float64 `json:"lat"`
	Lng float64 `json:"lng"`
}

// GetLat returns the value of Lat.
func (s *LatLng) GetLat() float64 {
	return s.Lat
}

// GetLng returns the value of Lng.
func (s *LatLng) GetLng() float64 {
	return s.Lng
}

// SetLat sets the value of Lat.
func (s *LatLng) SetLat(val float64) {
	s.Lat = val
}

// SetLng sets the value of Lng.
func (s *LatLng) SetLng(val float64) {
	s.Lng = val
}

// Ref: #/LobbiesResponse
type LobbiesResponse struct {
	Total   int     `json:"total"`
	Lobbies []Lobby `json:"lobbies"`
}

// GetTotal returns the value of Total.
func (s *LobbiesResponse) GetTotal() int {
	return s.Total
}

// GetLobbies returns the value of Lobbies.
func (s *LobbiesResponse) GetLobbies() []Lobby {
	return s.Lobbies
}

// SetTotal sets the value of Total.
func (s *LobbiesResponse) SetTotal(val int) {
	s.Total = val
}

// SetLobbies sets the value of Lobbies.
func (s *LobbiesResponse) SetLobbies(val []Lobby) {
	s.Lobbies = val
}

func (*LobbiesResponse) getLobbiesRes() {}

// Ref: #/Lobby
type Lobby struct {
	ID              string    `json:"id"`
	CreatorID       int       `json:"creatorID"`
	CreatedAt       time.Time `json:"createdAt"`
	Rounds          int       `json:"rounds"`
	Provider        Provider  `json:"provider"`
	MovementAllowed bool      `json:"movementAllowed"`
	TimerSeconds    int       `json:"timerSeconds"`
	CurrentPlayers  int       `json:"currentPlayers"`
	MaxPlayers      int       `json:"maxPlayers"`
}

// GetID returns the value of ID.
func (s *Lobby) GetID() string {
	return s.ID
}

// GetCreatorID returns the value of CreatorID.
func (s *Lobby) GetCreatorID() int {
	return s.CreatorID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Lobby) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetRounds returns the value of Rounds.
func (s *Lobby) GetRounds() int {
	return s.Rounds
}

// GetProvider returns the value of Provider.
func (s *Lobby) GetProvider() Provider {
	return s.Provider
}

// GetMovementAllowed returns the value of MovementAllowed.
func (s *Lobby) GetMovementAllowed() bool {
	return s.MovementAllowed
}

// GetTimerSeconds returns the value of TimerSeconds.
func (s *Lobby) GetTimerSeconds() int {
	return s.TimerSeconds
}

// GetCurrentPlayers returns the value of CurrentPlayers.
func (s *Lobby) GetCurrentPlayers() int {
	return s.CurrentPlayers
}

// GetMaxPlayers returns the value of MaxPlayers.
func (s *Lobby) GetMaxPlayers() int {
	return s.MaxPlayers
}

// SetID sets the value of ID.
func (s *Lobby) SetID(val string) {
	s.ID = val
}

// SetCreatorID sets the value of CreatorID.
func (s *Lobby) SetCreatorID(val int) {
	s.CreatorID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Lobby) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetRounds sets the value of Rounds.
func (s *Lobby) SetRounds(val int) {
	s.Rounds = val
}

// SetProvider sets the value of Provider.
func (s *Lobby) SetProvider(val Provider) {
	s.Provider = val
}

// SetMovementAllowed sets the value of MovementAllowed.
func (s *Lobby) SetMovementAllowed(val bool) {
	s.MovementAllowed = val
}

// SetTimerSeconds sets the value of TimerSeconds.
func (s *Lobby) SetTimerSeconds(val int) {
	s.TimerSeconds = val
}

// SetCurrentPlayers sets the value of CurrentPlayers.
func (s *Lobby) SetCurrentPlayers(val int) {
	s.CurrentPlayers = val
}

// SetMaxPlayers sets the value of MaxPlayers.
func (s *Lobby) SetMaxPlayers(val int) {
	s.MaxPlayers = val
}

func (*Lobby) getLobbyRes() {}

type LoginBadRequest Error

func (*LoginBadRequest) loginRes() {}

type LoginInternalServerError Error

func (*LoginInternalServerError) loginRes() {}

// LoginNoContent is response for Login operation.
type LoginNoContent struct {
	SetCookie string
}

// GetSetCookie returns the value of SetCookie.
func (s *LoginNoContent) GetSetCookie() string {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *LoginNoContent) SetSetCookie(val string) {
	s.SetCookie = val
}

func (*LoginNoContent) loginRes() {}

// Ref: #/LoginRequest
type LoginRequest struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *LoginRequest) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *LoginRequest) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *LoginRequest) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *LoginRequest) SetPassword(val string) {
	s.Password = val
}

type LoginUnauthorized Error

func (*LoginUnauthorized) loginRes() {}

// Ref: #/MultiplayerGame
type MultiplayerGame struct {
	ID              int       `json:"id"`
	CreatorID       int       `json:"creatorID"`
	Rounds          int       `json:"rounds"`
	RoundCurrent    int       `json:"roundCurrent"`
	TimerSeconds    int       `json:"timerSeconds"`
	MovementAllowed bool      `json:"movementAllowed"`
	Players         int       `json:"players"`
	Provider        Provider  `json:"provider"`
	Finished        bool      `json:"finished"`
	CreatedAt       time.Time `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *MultiplayerGame) GetID() int {
	return s.ID
}

// GetCreatorID returns the value of CreatorID.
func (s *MultiplayerGame) GetCreatorID() int {
	return s.CreatorID
}

// GetRounds returns the value of Rounds.
func (s *MultiplayerGame) GetRounds() int {
	return s.Rounds
}

// GetRoundCurrent returns the value of RoundCurrent.
func (s *MultiplayerGame) GetRoundCurrent() int {
	return s.RoundCurrent
}

// GetTimerSeconds returns the value of TimerSeconds.
func (s *MultiplayerGame) GetTimerSeconds() int {
	return s.TimerSeconds
}

// GetMovementAllowed returns the value of MovementAllowed.
func (s *MultiplayerGame) GetMovementAllowed() bool {
	return s.MovementAllowed
}

// GetPlayers returns the value of Players.
func (s *MultiplayerGame) GetPlayers() int {
	return s.Players
}

// GetProvider returns the value of Provider.
func (s *MultiplayerGame) GetProvider() Provider {
	return s.Provider
}

// GetFinished returns the value of Finished.
func (s *MultiplayerGame) GetFinished() bool {
	return s.Finished
}

// GetCreatedAt returns the value of CreatedAt.
func (s *MultiplayerGame) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *MultiplayerGame) SetID(val int) {
	s.ID = val
}

// SetCreatorID sets the value of CreatorID.
func (s *MultiplayerGame) SetCreatorID(val int) {
	s.CreatorID = val
}

// SetRounds sets the value of Rounds.
func (s *MultiplayerGame) SetRounds(val int) {
	s.Rounds = val
}

// SetRoundCurrent sets the value of RoundCurrent.
func (s *MultiplayerGame) SetRoundCurrent(val int) {
	s.RoundCurrent = val
}

// SetTimerSeconds sets the value of TimerSeconds.
func (s *MultiplayerGame) SetTimerSeconds(val int) {
	s.TimerSeconds = val
}

// SetMovementAllowed sets the value of MovementAllowed.
func (s *MultiplayerGame) SetMovementAllowed(val bool) {
	s.MovementAllowed = val
}

// SetPlayers sets the value of Players.
func (s *MultiplayerGame) SetPlayers(val int) {
	s.Players = val
}

// SetProvider sets the value of Provider.
func (s *MultiplayerGame) SetProvider(val Provider) {
	s.Provider = val
}

// SetFinished sets the value of Finished.
func (s *MultiplayerGame) SetFinished(val bool) {
	s.Finished = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *MultiplayerGame) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

func (*MultiplayerGame) getMultiplayerGameRes() {}

// Ref: #/MultiplayerGuess
type MultiplayerGuess struct {
	Username   string  `json:"username"`
	AvatarHash string  `json:"avatarHash"`
	RoundNum   int     `json:"roundNum"`
	RoundLat   float64 `json:"roundLat"`
	RoundLng   float64 `json:"roundLng"`
	Lat        float64 `json:"lat"`
	Lng        float64 `json:"lng"`
	Score      int     `json:"score"`
}

// GetUsername returns the value of Username.
func (s *MultiplayerGuess) GetUsername() string {
	return s.Username
}

// GetAvatarHash returns the value of AvatarHash.
func (s *MultiplayerGuess) GetAvatarHash() string {
	return s.AvatarHash
}

// GetRoundNum returns the value of RoundNum.
func (s *MultiplayerGuess) GetRoundNum() int {
	return s.RoundNum
}

// GetRoundLat returns the value of RoundLat.
func (s *MultiplayerGuess) GetRoundLat() float64 {
	return s.RoundLat
}

// GetRoundLng returns the value of RoundLng.
func (s *MultiplayerGuess) GetRoundLng() float64 {
	return s.RoundLng
}

// GetLat returns the value of Lat.
func (s *MultiplayerGuess) GetLat() float64 {
	return s.Lat
}

// GetLng returns the value of Lng.
func (s *MultiplayerGuess) GetLng() float64 {
	return s.Lng
}

// GetScore returns the value of Score.
func (s *MultiplayerGuess) GetScore() int {
	return s.Score
}

// SetUsername sets the value of Username.
func (s *MultiplayerGuess) SetUsername(val string) {
	s.Username = val
}

// SetAvatarHash sets the value of AvatarHash.
func (s *MultiplayerGuess) SetAvatarHash(val string) {
	s.AvatarHash = val
}

// SetRoundNum sets the value of RoundNum.
func (s *MultiplayerGuess) SetRoundNum(val int) {
	s.RoundNum = val
}

// SetRoundLat sets the value of RoundLat.
func (s *MultiplayerGuess) SetRoundLat(val float64) {
	s.RoundLat = val
}

// SetRoundLng sets the value of RoundLng.
func (s *MultiplayerGuess) SetRoundLng(val float64) {
	s.RoundLng = val
}

// SetLat sets the value of Lat.
func (s *MultiplayerGuess) SetLat(val float64) {
	s.Lat = val
}

// SetLng sets the value of Lng.
func (s *MultiplayerGuess) SetLng(val float64) {
	s.Lng = val
}

// SetScore sets the value of Score.
func (s *MultiplayerGuess) SetScore(val int) {
	s.Score = val
}

// Ref: #/MultiplayerRound
type MultiplayerRound struct {
	ID           int       `json:"id"`
	GameID       int       `json:"gameID"`
	StreetviewID string    `json:"streetviewID"`
	RoundNum     int       `json:"roundNum"`
	Lat          float64   `json:"lat"`
	Lng          float64   `json:"lng"`
	PanoramaURL  string    `json:"panoramaURL"`
	GuessesCount int       `json:"guessesCount"`
	Finished     bool      `json:"finished"`
	CreatedAt    time.Time `json:"createdAt"`
	StartedAt    time.Time `json:"startedAt"`
	EndedAt      time.Time `json:"endedAt"`
}

// GetID returns the value of ID.
func (s *MultiplayerRound) GetID() int {
	return s.ID
}

// GetGameID returns the value of GameID.
func (s *MultiplayerRound) GetGameID() int {
	return s.GameID
}

// GetStreetviewID returns the value of StreetviewID.
func (s *MultiplayerRound) GetStreetviewID() string {
	return s.StreetviewID
}

// GetRoundNum returns the value of RoundNum.
func (s *MultiplayerRound) GetRoundNum() int {
	return s.RoundNum
}

// GetLat returns the value of Lat.
func (s *MultiplayerRound) GetLat() float64 {
	return s.Lat
}

// GetLng returns the value of Lng.
func (s *MultiplayerRound) GetLng() float64 {
	return s.Lng
}

// GetPanoramaURL returns the value of PanoramaURL.
func (s *MultiplayerRound) GetPanoramaURL() string {
	return s.PanoramaURL
}

// GetGuessesCount returns the value of GuessesCount.
func (s *MultiplayerRound) GetGuessesCount() int {
	return s.GuessesCount
}

// GetFinished returns the value of Finished.
func (s *MultiplayerRound) GetFinished() bool {
	return s.Finished
}

// GetCreatedAt returns the value of CreatedAt.
func (s *MultiplayerRound) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetStartedAt returns the value of StartedAt.
func (s *MultiplayerRound) GetStartedAt() time.Time {
	return s.StartedAt
}

// GetEndedAt returns the value of EndedAt.
func (s *MultiplayerRound) GetEndedAt() time.Time {
	return s.EndedAt
}

// SetID sets the value of ID.
func (s *MultiplayerRound) SetID(val int) {
	s.ID = val
}

// SetGameID sets the value of GameID.
func (s *MultiplayerRound) SetGameID(val int) {
	s.GameID = val
}

// SetStreetviewID sets the value of StreetviewID.
func (s *MultiplayerRound) SetStreetviewID(val string) {
	s.StreetviewID = val
}

// SetRoundNum sets the value of RoundNum.
func (s *MultiplayerRound) SetRoundNum(val int) {
	s.RoundNum = val
}

// SetLat sets the value of Lat.
func (s *MultiplayerRound) SetLat(val float64) {
	s.Lat = val
}

// SetLng sets the value of Lng.
func (s *MultiplayerRound) SetLng(val float64) {
	s.Lng = val
}

// SetPanoramaURL sets the value of PanoramaURL.
func (s *MultiplayerRound) SetPanoramaURL(val string) {
	s.PanoramaURL = val
}

// SetGuessesCount sets the value of GuessesCount.
func (s *MultiplayerRound) SetGuessesCount(val int) {
	s.GuessesCount = val
}

// SetFinished sets the value of Finished.
func (s *MultiplayerRound) SetFinished(val bool) {
	s.Finished = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *MultiplayerRound) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *MultiplayerRound) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

// SetEndedAt sets the value of EndedAt.
func (s *MultiplayerRound) SetEndedAt(val time.Time) {
	s.EndedAt = val
}

func (*MultiplayerRound) getMultiplayerRoundRes() {}
func (*MultiplayerRound) newMultiplayerRoundRes() {}

type NewDiscordCallbackBadRequest Error

func (*NewDiscordCallbackBadRequest) newDiscordCallbackRes() {}

type NewDiscordCallbackInternalServerError Error

func (*NewDiscordCallbackInternalServerError) newDiscordCallbackRes() {}

// NewDiscordCallbackTemporaryRedirect is response for NewDiscordCallback operation.
type NewDiscordCallbackTemporaryRedirect struct {
	Location string
}

// GetLocation returns the value of Location.
func (s *NewDiscordCallbackTemporaryRedirect) GetLocation() string {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *NewDiscordCallbackTemporaryRedirect) SetLocation(val string) {
	s.Location = val
}

func (*NewDiscordCallbackTemporaryRedirect) newDiscordCallbackRes() {}

type NewDiscordCallbackUnauthorized Error

func (*NewDiscordCallbackUnauthorized) newDiscordCallbackRes() {}

// NewDiscordTemporaryRedirect is response for NewDiscord operation.
type NewDiscordTemporaryRedirect struct {
	Location  string
	SetCookie string
}

// GetLocation returns the value of Location.
func (s *NewDiscordTemporaryRedirect) GetLocation() string {
	return s.Location
}

// GetSetCookie returns the value of SetCookie.
func (s *NewDiscordTemporaryRedirect) GetSetCookie() string {
	return s.SetCookie
}

// SetLocation sets the value of Location.
func (s *NewDiscordTemporaryRedirect) SetLocation(val string) {
	s.Location = val
}

// SetSetCookie sets the value of SetCookie.
func (s *NewDiscordTemporaryRedirect) SetSetCookie(val string) {
	s.SetCookie = val
}

func (*NewDiscordTemporaryRedirect) newDiscordRes() {}

// Ref: #/NewLobby
type NewLobby struct {
	CreatorID       int      `json:"creatorID"`
	MaxPlayers      int      `json:"maxPlayers"`
	Rounds          int      `json:"rounds"`
	Provider        Provider `json:"provider"`
	TimerSeconds    OptInt   `json:"timerSeconds"`
	MovementAllowed bool     `json:"movementAllowed"`
}

// GetCreatorID returns the value of CreatorID.
func (s *NewLobby) GetCreatorID() int {
	return s.CreatorID
}

// GetMaxPlayers returns the value of MaxPlayers.
func (s *NewLobby) GetMaxPlayers() int {
	return s.MaxPlayers
}

// GetRounds returns the value of Rounds.
func (s *NewLobby) GetRounds() int {
	return s.Rounds
}

// GetProvider returns the value of Provider.
func (s *NewLobby) GetProvider() Provider {
	return s.Provider
}

// GetTimerSeconds returns the value of TimerSeconds.
func (s *NewLobby) GetTimerSeconds() OptInt {
	return s.TimerSeconds
}

// GetMovementAllowed returns the value of MovementAllowed.
func (s *NewLobby) GetMovementAllowed() bool {
	return s.MovementAllowed
}

// SetCreatorID sets the value of CreatorID.
func (s *NewLobby) SetCreatorID(val int) {
	s.CreatorID = val
}

// SetMaxPlayers sets the value of MaxPlayers.
func (s *NewLobby) SetMaxPlayers(val int) {
	s.MaxPlayers = val
}

// SetRounds sets the value of Rounds.
func (s *NewLobby) SetRounds(val int) {
	s.Rounds = val
}

// SetProvider sets the value of Provider.
func (s *NewLobby) SetProvider(val Provider) {
	s.Provider = val
}

// SetTimerSeconds sets the value of TimerSeconds.
func (s *NewLobby) SetTimerSeconds(val OptInt) {
	s.TimerSeconds = val
}

// SetMovementAllowed sets the value of MovementAllowed.
func (s *NewLobby) SetMovementAllowed(val bool) {
	s.MovementAllowed = val
}

type NewLobbyBadRequest Error

func (*NewLobbyBadRequest) newLobbyRes() {}

type NewLobbyCreated struct {
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *NewLobbyCreated) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *NewLobbyCreated) SetID(val string) {
	s.ID = val
}

func (*NewLobbyCreated) newLobbyRes() {}

type NewLobbyInternalServerError Error

func (*NewLobbyInternalServerError) newLobbyRes() {}

type NewMultiplayerRoundInternalServerError Error

func (*NewMultiplayerRoundInternalServerError) newMultiplayerRoundRes() {}

type NewMultiplayerRoundNotFound Error

func (*NewMultiplayerRoundNotFound) newMultiplayerRoundRes() {}

type NewMultiplayerRoundUnauthorized Error

func (*NewMultiplayerRoundUnauthorized) newMultiplayerRoundRes() {}

type NewSingleplayerGameBadRequest Error

func (*NewSingleplayerGameBadRequest) newSingleplayerGameRes() {}

type NewSingleplayerGameCreated struct {
	ID int `json:"id"`
}

// GetID returns the value of ID.
func (s *NewSingleplayerGameCreated) GetID() int {
	return s.ID
}

// SetID sets the value of ID.
func (s *NewSingleplayerGameCreated) SetID(val int) {
	s.ID = val
}

func (*NewSingleplayerGameCreated) newSingleplayerGameRes() {}

type NewSingleplayerGameInternalServerError Error

func (*NewSingleplayerGameInternalServerError) newSingleplayerGameRes() {}

// Ref: #/NewSingleplayerGameRequest
type NewSingleplayerGameRequest struct {
	Rounds          int      `json:"rounds"`
	TimerSeconds    OptInt   `json:"timerSeconds"`
	MovementAllowed bool     `json:"movementAllowed"`
	Provider        Provider `json:"provider"`
}

// GetRounds returns the value of Rounds.
func (s *NewSingleplayerGameRequest) GetRounds() int {
	return s.Rounds
}

// GetTimerSeconds returns the value of TimerSeconds.
func (s *NewSingleplayerGameRequest) GetTimerSeconds() OptInt {
	return s.TimerSeconds
}

// GetMovementAllowed returns the value of MovementAllowed.
func (s *NewSingleplayerGameRequest) GetMovementAllowed() bool {
	return s.MovementAllowed
}

// GetProvider returns the value of Provider.
func (s *NewSingleplayerGameRequest) GetProvider() Provider {
	return s.Provider
}

// SetRounds sets the value of Rounds.
func (s *NewSingleplayerGameRequest) SetRounds(val int) {
	s.Rounds = val
}

// SetTimerSeconds sets the value of TimerSeconds.
func (s *NewSingleplayerGameRequest) SetTimerSeconds(val OptInt) {
	s.TimerSeconds = val
}

// SetMovementAllowed sets the value of MovementAllowed.
func (s *NewSingleplayerGameRequest) SetMovementAllowed(val bool) {
	s.MovementAllowed = val
}

// SetProvider sets the value of Provider.
func (s *NewSingleplayerGameRequest) SetProvider(val Provider) {
	s.Provider = val
}

type NewSingleplayerGameUnauthorized Error

func (*NewSingleplayerGameUnauthorized) newSingleplayerGameRes() {}

type NewSingleplayerRoundBadRequest Error

func (*NewSingleplayerRoundBadRequest) newSingleplayerRoundRes() {}

type NewSingleplayerRoundForbidden Error

func (*NewSingleplayerRoundForbidden) newSingleplayerRoundRes() {}

type NewSingleplayerRoundInternalServerError Error

func (*NewSingleplayerRoundInternalServerError) newSingleplayerRoundRes() {}

type NewSingleplayerRoundNotFound Error

func (*NewSingleplayerRoundNotFound) newSingleplayerRoundRes() {}

type NewSingleplayerRoundUnauthorized Error

func (*NewSingleplayerRoundUnauthorized) newSingleplayerRoundRes() {}

type NewYandexCallbackBadRequest Error

func (*NewYandexCallbackBadRequest) newYandexCallbackRes() {}

type NewYandexCallbackInternalServerError Error

func (*NewYandexCallbackInternalServerError) newYandexCallbackRes() {}

// NewYandexCallbackTemporaryRedirect is response for NewYandexCallback operation.
type NewYandexCallbackTemporaryRedirect struct {
	Location string
}

// GetLocation returns the value of Location.
func (s *NewYandexCallbackTemporaryRedirect) GetLocation() string {
	return s.Location
}

// SetLocation sets the value of Location.
func (s *NewYandexCallbackTemporaryRedirect) SetLocation(val string) {
	s.Location = val
}

func (*NewYandexCallbackTemporaryRedirect) newYandexCallbackRes() {}

type NewYandexCallbackUnauthorized Error

func (*NewYandexCallbackUnauthorized) newYandexCallbackRes() {}

// NewYandexTemporaryRedirect is response for NewYandex operation.
type NewYandexTemporaryRedirect struct {
	Location  string
	SetCookie string
}

// GetLocation returns the value of Location.
func (s *NewYandexTemporaryRedirect) GetLocation() string {
	return s.Location
}

// GetSetCookie returns the value of SetCookie.
func (s *NewYandexTemporaryRedirect) GetSetCookie() string {
	return s.SetCookie
}

// SetLocation sets the value of Location.
func (s *NewYandexTemporaryRedirect) SetLocation(val string) {
	s.Location = val
}

// SetSetCookie sets the value of SetCookie.
func (s *NewYandexTemporaryRedirect) SetSetCookie(val string) {
	s.SetCookie = val
}

func (*NewYandexTemporaryRedirect) newYandexRes() {}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/Provider
type Provider string

const (
	ProviderGoogle    Provider = "google"
	ProviderYandex    Provider = "yandex"
	ProviderYandexAir Provider = "yandex_air"
	ProviderSeznam    Provider = "seznam"
)

// AllValues returns all Provider values.
func (Provider) AllValues() []Provider {
	return []Provider{
		ProviderGoogle,
		ProviderYandex,
		ProviderYandexAir,
		ProviderSeznam,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s Provider) MarshalText() ([]byte, error) {
	switch s {
	case ProviderGoogle:
		return []byte(s), nil
	case ProviderYandex:
		return []byte(s), nil
	case ProviderYandexAir:
		return []byte(s), nil
	case ProviderSeznam:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Provider) UnmarshalText(data []byte) error {
	switch Provider(data) {
	case ProviderGoogle:
		*s = ProviderGoogle
		return nil
	case ProviderYandex:
		*s = ProviderYandex
		return nil
	case ProviderYandexAir:
		*s = ProviderYandexAir
		return nil
	case ProviderSeznam:
		*s = ProviderSeznam
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type RefreshTokensBadRequest Error

func (*RefreshTokensBadRequest) refreshTokensRes() {}

type RefreshTokensInternalServerError Error

func (*RefreshTokensInternalServerError) refreshTokensRes() {}

// RefreshTokensNoContent is response for RefreshTokens operation.
type RefreshTokensNoContent struct {
	SetCookie string
}

// GetSetCookie returns the value of SetCookie.
func (s *RefreshTokensNoContent) GetSetCookie() string {
	return s.SetCookie
}

// SetSetCookie sets the value of SetCookie.
func (s *RefreshTokensNoContent) SetSetCookie(val string) {
	s.SetCookie = val
}

func (*RefreshTokensNoContent) refreshTokensRes() {}

type RefreshTokensReq struct {
	RefreshToken string `json:"refreshToken"`
}

// GetRefreshToken returns the value of RefreshToken.
func (s *RefreshTokensReq) GetRefreshToken() string {
	return s.RefreshToken
}

// SetRefreshToken sets the value of RefreshToken.
func (s *RefreshTokensReq) SetRefreshToken(val string) {
	s.RefreshToken = val
}

type RegisterBadRequest Error

func (*RegisterBadRequest) registerRes() {}

type RegisterConflict Error

func (*RegisterConflict) registerRes() {}

// RegisterCreated is response for Register operation.
type RegisterCreated struct{}

func (*RegisterCreated) registerRes() {}

type RegisterInternalServerError Error

func (*RegisterInternalServerError) registerRes() {}

// Ref: #/RegisterRequest
type RegisterRequest struct {
	Username string    `json:"username"`
	Password string    `json:"password"`
	Name     OptString `json:"name"`
}

// GetUsername returns the value of Username.
func (s *RegisterRequest) GetUsername() string {
	return s.Username
}

// GetPassword returns the value of Password.
func (s *RegisterRequest) GetPassword() string {
	return s.Password
}

// GetName returns the value of Name.
func (s *RegisterRequest) GetName() OptString {
	return s.Name
}

// SetUsername sets the value of Username.
func (s *RegisterRequest) SetUsername(val string) {
	s.Username = val
}

// SetPassword sets the value of Password.
func (s *RegisterRequest) SetPassword(val string) {
	s.Password = val
}

// SetName sets the value of Name.
func (s *RegisterRequest) SetName(val OptString) {
	s.Name = val
}

// Ref: #/SingleplayerGame
type SingleplayerGame struct {
	ID              int       `json:"id"`
	UserID          int       `json:"userID"`
	Rounds          int       `json:"rounds"`
	RoundCurrent    int       `json:"roundCurrent"`
	TimerSeconds    int       `json:"timerSeconds"`
	MovementAllowed bool      `json:"movementAllowed"`
	Provider        Provider  `json:"provider"`
	Score           int       `json:"score"`
	Finished        bool      `json:"finished"`
	CreatedAt       time.Time `json:"createdAt"`
}

// GetID returns the value of ID.
func (s *SingleplayerGame) GetID() int {
	return s.ID
}

// GetUserID returns the value of UserID.
func (s *SingleplayerGame) GetUserID() int {
	return s.UserID
}

// GetRounds returns the value of Rounds.
func (s *SingleplayerGame) GetRounds() int {
	return s.Rounds
}

// GetRoundCurrent returns the value of RoundCurrent.
func (s *SingleplayerGame) GetRoundCurrent() int {
	return s.RoundCurrent
}

// GetTimerSeconds returns the value of TimerSeconds.
func (s *SingleplayerGame) GetTimerSeconds() int {
	return s.TimerSeconds
}

// GetMovementAllowed returns the value of MovementAllowed.
func (s *SingleplayerGame) GetMovementAllowed() bool {
	return s.MovementAllowed
}

// GetProvider returns the value of Provider.
func (s *SingleplayerGame) GetProvider() Provider {
	return s.Provider
}

// GetScore returns the value of Score.
func (s *SingleplayerGame) GetScore() int {
	return s.Score
}

// GetFinished returns the value of Finished.
func (s *SingleplayerGame) GetFinished() bool {
	return s.Finished
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SingleplayerGame) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *SingleplayerGame) SetID(val int) {
	s.ID = val
}

// SetUserID sets the value of UserID.
func (s *SingleplayerGame) SetUserID(val int) {
	s.UserID = val
}

// SetRounds sets the value of Rounds.
func (s *SingleplayerGame) SetRounds(val int) {
	s.Rounds = val
}

// SetRoundCurrent sets the value of RoundCurrent.
func (s *SingleplayerGame) SetRoundCurrent(val int) {
	s.RoundCurrent = val
}

// SetTimerSeconds sets the value of TimerSeconds.
func (s *SingleplayerGame) SetTimerSeconds(val int) {
	s.TimerSeconds = val
}

// SetMovementAllowed sets the value of MovementAllowed.
func (s *SingleplayerGame) SetMovementAllowed(val bool) {
	s.MovementAllowed = val
}

// SetProvider sets the value of Provider.
func (s *SingleplayerGame) SetProvider(val Provider) {
	s.Provider = val
}

// SetScore sets the value of Score.
func (s *SingleplayerGame) SetScore(val int) {
	s.Score = val
}

// SetFinished sets the value of Finished.
func (s *SingleplayerGame) SetFinished(val bool) {
	s.Finished = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SingleplayerGame) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

func (*SingleplayerGame) getSingleplayerGameRes() {}

// Ref: #/SingleplayerGames
type SingleplayerGames struct {
	Total int                `json:"total"`
	Games []SingleplayerGame `json:"games"`
}

// GetTotal returns the value of Total.
func (s *SingleplayerGames) GetTotal() int {
	return s.Total
}

// GetGames returns the value of Games.
func (s *SingleplayerGames) GetGames() []SingleplayerGame {
	return s.Games
}

// SetTotal sets the value of Total.
func (s *SingleplayerGames) SetTotal(val int) {
	s.Total = val
}

// SetGames sets the value of Games.
func (s *SingleplayerGames) SetGames(val []SingleplayerGame) {
	s.Games = val
}

func (*SingleplayerGames) getSingleplayerGamesRes() {}

// Ref: #/SingleplayerRound
type SingleplayerRound struct {
	ID           int       `json:"id"`
	GameID       int       `json:"gameID"`
	StreetviewID string    `json:"streetviewID"`
	RoundNum     int       `json:"roundNum"`
	Lat          float64   `json:"lat"`
	Lng          float64   `json:"lng"`
	PanoramaURL  string    `json:"panoramaURL"`
	Finished     bool      `json:"finished"`
	CreatedAt    time.Time `json:"createdAt"`
	StartedAt    time.Time `json:"startedAt"`
}

// GetID returns the value of ID.
func (s *SingleplayerRound) GetID() int {
	return s.ID
}

// GetGameID returns the value of GameID.
func (s *SingleplayerRound) GetGameID() int {
	return s.GameID
}

// GetStreetviewID returns the value of StreetviewID.
func (s *SingleplayerRound) GetStreetviewID() string {
	return s.StreetviewID
}

// GetRoundNum returns the value of RoundNum.
func (s *SingleplayerRound) GetRoundNum() int {
	return s.RoundNum
}

// GetLat returns the value of Lat.
func (s *SingleplayerRound) GetLat() float64 {
	return s.Lat
}

// GetLng returns the value of Lng.
func (s *SingleplayerRound) GetLng() float64 {
	return s.Lng
}

// GetPanoramaURL returns the value of PanoramaURL.
func (s *SingleplayerRound) GetPanoramaURL() string {
	return s.PanoramaURL
}

// GetFinished returns the value of Finished.
func (s *SingleplayerRound) GetFinished() bool {
	return s.Finished
}

// GetCreatedAt returns the value of CreatedAt.
func (s *SingleplayerRound) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetStartedAt returns the value of StartedAt.
func (s *SingleplayerRound) GetStartedAt() time.Time {
	return s.StartedAt
}

// SetID sets the value of ID.
func (s *SingleplayerRound) SetID(val int) {
	s.ID = val
}

// SetGameID sets the value of GameID.
func (s *SingleplayerRound) SetGameID(val int) {
	s.GameID = val
}

// SetStreetviewID sets the value of StreetviewID.
func (s *SingleplayerRound) SetStreetviewID(val string) {
	s.StreetviewID = val
}

// SetRoundNum sets the value of RoundNum.
func (s *SingleplayerRound) SetRoundNum(val int) {
	s.RoundNum = val
}

// SetLat sets the value of Lat.
func (s *SingleplayerRound) SetLat(val float64) {
	s.Lat = val
}

// SetLng sets the value of Lng.
func (s *SingleplayerRound) SetLng(val float64) {
	s.Lng = val
}

// SetPanoramaURL sets the value of PanoramaURL.
func (s *SingleplayerRound) SetPanoramaURL(val string) {
	s.PanoramaURL = val
}

// SetFinished sets the value of Finished.
func (s *SingleplayerRound) SetFinished(val bool) {
	s.Finished = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *SingleplayerRound) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *SingleplayerRound) SetStartedAt(val time.Time) {
	s.StartedAt = val
}

func (*SingleplayerRound) getSingleplayerRoundRes() {}
func (*SingleplayerRound) newSingleplayerRoundRes() {}

// Ref: #/SingleplayerRoundGuess
type SingleplayerRoundGuess struct {
	Guess LatLng `json:"guess"`
}

// GetGuess returns the value of Guess.
func (s *SingleplayerRoundGuess) GetGuess() LatLng {
	return s.Guess
}

// SetGuess sets the value of Guess.
func (s *SingleplayerRoundGuess) SetGuess(val LatLng) {
	s.Guess = val
}

// Ref: #/SingleplayerRoundsWithGuess
type SingleplayerRoundsWithGuess struct {
	RoundNum     int     `json:"roundNum"`
	RoundLat     float64 `json:"roundLat"`
	RoundLng     float64 `json:"roundLng"`
	GuessLat     float64 `json:"guessLat"`
	GuessLng     float64 `json:"guessLng"`
	Score        int     `json:"score"`
	MissDistance int     `json:"missDistance"`
}

// GetRoundNum returns the value of RoundNum.
func (s *SingleplayerRoundsWithGuess) GetRoundNum() int {
	return s.RoundNum
}

// GetRoundLat returns the value of RoundLat.
func (s *SingleplayerRoundsWithGuess) GetRoundLat() float64 {
	return s.RoundLat
}

// GetRoundLng returns the value of RoundLng.
func (s *SingleplayerRoundsWithGuess) GetRoundLng() float64 {
	return s.RoundLng
}

// GetGuessLat returns the value of GuessLat.
func (s *SingleplayerRoundsWithGuess) GetGuessLat() float64 {
	return s.GuessLat
}

// GetGuessLng returns the value of GuessLng.
func (s *SingleplayerRoundsWithGuess) GetGuessLng() float64 {
	return s.GuessLng
}

// GetScore returns the value of Score.
func (s *SingleplayerRoundsWithGuess) GetScore() int {
	return s.Score
}

// GetMissDistance returns the value of MissDistance.
func (s *SingleplayerRoundsWithGuess) GetMissDistance() int {
	return s.MissDistance
}

// SetRoundNum sets the value of RoundNum.
func (s *SingleplayerRoundsWithGuess) SetRoundNum(val int) {
	s.RoundNum = val
}

// SetRoundLat sets the value of RoundLat.
func (s *SingleplayerRoundsWithGuess) SetRoundLat(val float64) {
	s.RoundLat = val
}

// SetRoundLng sets the value of RoundLng.
func (s *SingleplayerRoundsWithGuess) SetRoundLng(val float64) {
	s.RoundLng = val
}

// SetGuessLat sets the value of GuessLat.
func (s *SingleplayerRoundsWithGuess) SetGuessLat(val float64) {
	s.GuessLat = val
}

// SetGuessLng sets the value of GuessLng.
func (s *SingleplayerRoundsWithGuess) SetGuessLng(val float64) {
	s.GuessLng = val
}

// SetScore sets the value of Score.
func (s *SingleplayerRoundsWithGuess) SetScore(val int) {
	s.Score = val
}

// SetMissDistance sets the value of MissDistance.
func (s *SingleplayerRoundsWithGuess) SetMissDistance(val int) {
	s.MissDistance = val
}

type UpdateUserAvatarInternalServerError Error

func (*UpdateUserAvatarInternalServerError) updateUserAvatarRes() {}

// UpdateUserAvatarNoContent is response for UpdateUserAvatar operation.
type UpdateUserAvatarNoContent struct{}

func (*UpdateUserAvatarNoContent) updateUserAvatarRes() {}

type UpdateUserAvatarReq struct {
	// Image file.
	AvatarFile ht.MultipartFile `json:"avatarFile"`
}

// GetAvatarFile returns the value of AvatarFile.
func (s *UpdateUserAvatarReq) GetAvatarFile() ht.MultipartFile {
	return s.AvatarFile
}

// SetAvatarFile sets the value of AvatarFile.
func (s *UpdateUserAvatarReq) SetAvatarFile(val ht.MultipartFile) {
	s.AvatarFile = val
}

type UpdateUserAvatarRequestEntityTooLarge Error

func (*UpdateUserAvatarRequestEntityTooLarge) updateUserAvatarRes() {}

type UpdateUserAvatarTooManyRequests Error

func (*UpdateUserAvatarTooManyRequests) updateUserAvatarRes() {}

type UpdateUserAvatarUnauthorized Error

func (*UpdateUserAvatarUnauthorized) updateUserAvatarRes() {}

type UpdateUserInternalServerError Error

func (*UpdateUserInternalServerError) updateUserRes() {}

// UpdateUserNoContent is response for UpdateUser operation.
type UpdateUserNoContent struct{}

func (*UpdateUserNoContent) updateUserRes() {}

type UpdateUserUnauthorized Error

func (*UpdateUserUnauthorized) updateUserRes() {}

// Ref: #/UserPrivateProfile
type UserPrivateProfile struct {
	ID               int       `json:"id"`
	Username         string    `json:"username"`
	Name             string    `json:"name"`
	AvatarHash       string    `json:"avatarHash"`
	RegisterDate     time.Time `json:"registerDate"`
	YandexConnected  bool      `json:"yandexConnected"`
	DiscordConnected bool      `json:"discordConnected"`
}

// GetID returns the value of ID.
func (s *UserPrivateProfile) GetID() int {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *UserPrivateProfile) GetUsername() string {
	return s.Username
}

// GetName returns the value of Name.
func (s *UserPrivateProfile) GetName() string {
	return s.Name
}

// GetAvatarHash returns the value of AvatarHash.
func (s *UserPrivateProfile) GetAvatarHash() string {
	return s.AvatarHash
}

// GetRegisterDate returns the value of RegisterDate.
func (s *UserPrivateProfile) GetRegisterDate() time.Time {
	return s.RegisterDate
}

// GetYandexConnected returns the value of YandexConnected.
func (s *UserPrivateProfile) GetYandexConnected() bool {
	return s.YandexConnected
}

// GetDiscordConnected returns the value of DiscordConnected.
func (s *UserPrivateProfile) GetDiscordConnected() bool {
	return s.DiscordConnected
}

// SetID sets the value of ID.
func (s *UserPrivateProfile) SetID(val int) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *UserPrivateProfile) SetUsername(val string) {
	s.Username = val
}

// SetName sets the value of Name.
func (s *UserPrivateProfile) SetName(val string) {
	s.Name = val
}

// SetAvatarHash sets the value of AvatarHash.
func (s *UserPrivateProfile) SetAvatarHash(val string) {
	s.AvatarHash = val
}

// SetRegisterDate sets the value of RegisterDate.
func (s *UserPrivateProfile) SetRegisterDate(val time.Time) {
	s.RegisterDate = val
}

// SetYandexConnected sets the value of YandexConnected.
func (s *UserPrivateProfile) SetYandexConnected(val bool) {
	s.YandexConnected = val
}

// SetDiscordConnected sets the value of DiscordConnected.
func (s *UserPrivateProfile) SetDiscordConnected(val bool) {
	s.DiscordConnected = val
}

func (*UserPrivateProfile) getPrivateProfileRes() {}

// Ref: #/UserPublicProfile
type UserPublicProfile struct {
	ID           int       `json:"id"`
	Username     string    `json:"username"`
	Name         string    `json:"name"`
	AvatarHash   string    `json:"avatarHash"`
	RegisterDate time.Time `json:"registerDate"`
}

// GetID returns the value of ID.
func (s *UserPublicProfile) GetID() int {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *UserPublicProfile) GetUsername() string {
	return s.Username
}

// GetName returns the value of Name.
func (s *UserPublicProfile) GetName() string {
	return s.Name
}

// GetAvatarHash returns the value of AvatarHash.
func (s *UserPublicProfile) GetAvatarHash() string {
	return s.AvatarHash
}

// GetRegisterDate returns the value of RegisterDate.
func (s *UserPublicProfile) GetRegisterDate() time.Time {
	return s.RegisterDate
}

// SetID sets the value of ID.
func (s *UserPublicProfile) SetID(val int) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *UserPublicProfile) SetUsername(val string) {
	s.Username = val
}

// SetName sets the value of Name.
func (s *UserPublicProfile) SetName(val string) {
	s.Name = val
}

// SetAvatarHash sets the value of AvatarHash.
func (s *UserPublicProfile) SetAvatarHash(val string) {
	s.AvatarHash = val
}

// SetRegisterDate sets the value of RegisterDate.
func (s *UserPublicProfile) SetRegisterDate(val time.Time) {
	s.RegisterDate = val
}

func (*UserPublicProfile) getPublicProfileRes() {}

// Ref: #/UserUpdateRequest
type UserUpdateRequest struct {
	Name OptString `json:"name"`
}

// GetName returns the value of Name.
func (s *UserUpdateRequest) GetName() OptString {
	return s.Name
}

// SetName sets the value of Name.
func (s *UserUpdateRequest) SetName(val OptString) {
	s.Name = val
}

type YandexLoginCallbackBadRequest Error

func (*YandexLoginCallbackBadRequest) yandexLoginCallbackRes() {}

type YandexLoginCallbackInternalServerError Error

func (*YandexLoginCallbackInternalServerError) yandexLoginCallbackRes() {}

type YandexLoginCallbackNotFound Error

func (*YandexLoginCallbackNotFound) yandexLoginCallbackRes() {}

// YandexLoginCallbackTemporaryRedirect is response for YandexLoginCallback operation.
type YandexLoginCallbackTemporaryRedirect struct {
	Location  string
	SetCookie string
}

// GetLocation returns the value of Location.
func (s *YandexLoginCallbackTemporaryRedirect) GetLocation() string {
	return s.Location
}

// GetSetCookie returns the value of SetCookie.
func (s *YandexLoginCallbackTemporaryRedirect) GetSetCookie() string {
	return s.SetCookie
}

// SetLocation sets the value of Location.
func (s *YandexLoginCallbackTemporaryRedirect) SetLocation(val string) {
	s.Location = val
}

// SetSetCookie sets the value of SetCookie.
func (s *YandexLoginCallbackTemporaryRedirect) SetSetCookie(val string) {
	s.SetCookie = val
}

func (*YandexLoginCallbackTemporaryRedirect) yandexLoginCallbackRes() {}

// YandexLoginTemporaryRedirect is response for YandexLogin operation.
type YandexLoginTemporaryRedirect struct {
	Location  string
	SetCookie string
}

// GetLocation returns the value of Location.
func (s *YandexLoginTemporaryRedirect) GetLocation() string {
	return s.Location
}

// GetSetCookie returns the value of SetCookie.
func (s *YandexLoginTemporaryRedirect) GetSetCookie() string {
	return s.SetCookie
}

// SetLocation sets the value of Location.
func (s *YandexLoginTemporaryRedirect) SetLocation(val string) {
	s.Location = val
}

// SetSetCookie sets the value of SetCookie.
func (s *YandexLoginTemporaryRedirect) SetSetCookie(val string) {
	s.SetCookie = val
}
