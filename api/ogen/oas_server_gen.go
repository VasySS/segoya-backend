// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	AuthHandler
	LobbiesHandler
	MultiplayerHandler
	SingleplayerHandler
	UsersHandler
}

// AuthHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Auth
type AuthHandler interface {
	// DeleteDiscord implements deleteDiscord operation.
	//
	// Delete login with Discord OAuth.
	//
	// DELETE /v1/auth/discord
	DeleteDiscord(ctx context.Context) (DeleteDiscordRes, error)
	// DeleteUserSession implements deleteUserSession operation.
	//
	// Delete user session.
	//
	// DELETE /v1/auth/sessions/{id}
	DeleteUserSession(ctx context.Context, params DeleteUserSessionParams) (DeleteUserSessionRes, error)
	// DeleteYandex implements deleteYandex operation.
	//
	// Delete login with Yandex OAuth.
	//
	// DELETE /v1/auth/yandex
	DeleteYandex(ctx context.Context) (DeleteYandexRes, error)
	// DiscordLogin implements discordLogin operation.
	//
	// Log in using Discord OAuth.
	//
	// GET /v1/auth/discord/login
	DiscordLogin(ctx context.Context) (*DiscordLoginTemporaryRedirect, error)
	// DiscordLoginCallback implements discordLoginCallback operation.
	//
	// A callback for Discord OAuth login.
	//
	// GET /v1/auth/discord/login/callback
	DiscordLoginCallback(ctx context.Context, params DiscordLoginCallbackParams) (DiscordLoginCallbackRes, error)
	// GetOAuthProviders implements getOAuthProviders operation.
	//
	// Get all connected OAuth providers.
	//
	// GET /v1/auth/providers
	GetOAuthProviders(ctx context.Context) (GetOAuthProvidersRes, error)
	// GetUserSessions implements getUserSessions operation.
	//
	// Get user sessions.
	//
	// GET /v1/auth/sessions
	GetUserSessions(ctx context.Context) (GetUserSessionsRes, error)
	// Login implements login operation.
	//
	// Login user.
	//
	// POST /v1/auth/login
	Login(ctx context.Context, req *LoginReq, params LoginParams) (LoginRes, error)
	// NewDiscord implements newDiscord operation.
	//
	// Create Discord OAuth connection.
	//
	// GET /v1/auth/discord/new
	NewDiscord(ctx context.Context) (NewDiscordRes, error)
	// NewDiscordCallback implements newDiscordCallback operation.
	//
	// A callback for new Discord OAuth.
	//
	// GET /v1/auth/discord/new/callback
	NewDiscordCallback(ctx context.Context, params NewDiscordCallbackParams) (NewDiscordCallbackRes, error)
	// NewYandex implements newYandex operation.
	//
	// Create Yandex OAuth connection.
	//
	// GET /v1/auth/yandex/new
	NewYandex(ctx context.Context) (NewYandexRes, error)
	// NewYandexCallback implements newYandexCallback operation.
	//
	// A callback for new Yandex OAuth.
	//
	// GET /v1/auth/yandex/new/callback
	NewYandexCallback(ctx context.Context, params NewYandexCallbackParams) (NewYandexCallbackRes, error)
	// RefreshTokens implements refreshTokens operation.
	//
	// Get new refresh and access tokens.
	//
	// POST /v1/auth/tokens/refresh
	RefreshTokens(ctx context.Context, req *RefreshTokensReq) (RefreshTokensRes, error)
	// Register implements register operation.
	//
	// Register new user.
	//
	// POST /v1/auth/register
	Register(ctx context.Context, req *RegisterReq, params RegisterParams) (RegisterRes, error)
	// YandexLogin implements yandexLogin operation.
	//
	// Log in using Yandex OAuth.
	//
	// GET /v1/auth/yandex/login
	YandexLogin(ctx context.Context) (*YandexLoginTemporaryRedirect, error)
	// YandexLoginCallback implements yandexLoginCallback operation.
	//
	// A callback for Yandex OAuth login.
	//
	// GET /v1/auth/yandex/login/callback
	YandexLoginCallback(ctx context.Context, params YandexLoginCallbackParams) (YandexLoginCallbackRes, error)
}

// LobbiesHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Lobbies
type LobbiesHandler interface {
	// GetLobbies implements getLobbies operation.
	//
	// Get all available lobbies.
	//
	// GET /v1/lobbies
	GetLobbies(ctx context.Context, params GetLobbiesParams) (GetLobbiesRes, error)
	// GetLobby implements getLobby operation.
	//
	// Get lobby information by ID.
	//
	// GET /v1/lobbies/{id}
	GetLobby(ctx context.Context, params GetLobbyParams) (GetLobbyRes, error)
	// NewLobby implements newLobby operation.
	//
	// Create new lobby.
	//
	// POST /v1/lobbies
	NewLobby(ctx context.Context, req *NewLobby) (NewLobbyRes, error)
}

// MultiplayerHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Multiplayer
type MultiplayerHandler interface {
	// GetMultiplayerGame implements getMultiplayerGame operation.
	//
	// Get multiplayer game information by ID.
	//
	// GET /v1/multiplayer/{id}
	GetMultiplayerGame(ctx context.Context, params GetMultiplayerGameParams) (GetMultiplayerGameRes, error)
	// GetMultiplayerGameGuesses implements getMultiplayerGameGuesses operation.
	//
	// Get multiplayer game user guesses.
	//
	// GET /v1/multiplayer/{id}/guesses
	GetMultiplayerGameGuesses(ctx context.Context, params GetMultiplayerGameGuessesParams) (GetMultiplayerGameGuessesRes, error)
	// GetMultiplayerRound implements getMultiplayerRound operation.
	//
	// Get multiplayer game round.
	//
	// GET /v1/multiplayer/{id}/round
	GetMultiplayerRound(ctx context.Context, params GetMultiplayerRoundParams) (GetMultiplayerRoundRes, error)
	// NewMultiplayerRound implements newMultiplayerRound operation.
	//
	// Get or generate multiplayer game round.
	//
	// POST /v1/multiplayer/{id}/round
	NewMultiplayerRound(ctx context.Context, params NewMultiplayerRoundParams) (NewMultiplayerRoundRes, error)
}

// SingleplayerHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Singleplayer
type SingleplayerHandler interface {
	// EndSingleplayerGame implements endSingleplayerGame operation.
	//
	// End singleplayer game.
	//
	// POST /v1/singleplayer/{id}/end
	EndSingleplayerGame(ctx context.Context, params EndSingleplayerGameParams) (EndSingleplayerGameRes, error)
	// EndSingleplayerRound implements endSingleplayerRound operation.
	//
	// End singleplayer game round.
	//
	// POST /v1/singleplayer/{id}/round/end
	EndSingleplayerRound(ctx context.Context, req *SingleplayerRoundGuess, params EndSingleplayerRoundParams) (EndSingleplayerRoundRes, error)
	// GetSingleplayerGame implements getSingleplayerGame operation.
	//
	// Get singleplayer game information by ID.
	//
	// GET /v1/singleplayer/{id}
	GetSingleplayerGame(ctx context.Context, params GetSingleplayerGameParams) (GetSingleplayerGameRes, error)
	// GetSingleplayerGameRounds implements getSingleplayerGameRounds operation.
	//
	// Get singleplayer game rounds.
	//
	// GET /v1/singleplayer/{id}/rounds
	GetSingleplayerGameRounds(ctx context.Context, params GetSingleplayerGameRoundsParams) (GetSingleplayerGameRoundsRes, error)
	// GetSingleplayerGames implements getSingleplayerGames operation.
	//
	// Get all singleplayer user games.
	//
	// GET /v1/singleplayer
	GetSingleplayerGames(ctx context.Context, params GetSingleplayerGamesParams) (GetSingleplayerGamesRes, error)
	// GetSingleplayerRound implements getSingleplayerRound operation.
	//
	// Get singleplayer game round.
	//
	// GET /v1/singleplayer/{id}/round
	GetSingleplayerRound(ctx context.Context, params GetSingleplayerRoundParams) (GetSingleplayerRoundRes, error)
	// NewSingleplayerGame implements newSingleplayerGame operation.
	//
	// Create new singleplayer game.
	//
	// POST /v1/singleplayer
	NewSingleplayerGame(ctx context.Context, req *NewSingleplayerGameReq) (NewSingleplayerGameRes, error)
	// NewSingleplayerRound implements newSingleplayerRound operation.
	//
	// Create singleplayer game round.
	//
	// POST /v1/singleplayer/{id}/round
	NewSingleplayerRound(ctx context.Context, params NewSingleplayerRoundParams) (NewSingleplayerRoundRes, error)
}

// UsersHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Users
type UsersHandler interface {
	// GetPrivateProfile implements getPrivateProfile operation.
	//
	// Retrieve authenticated user profile details.
	//
	// GET /v1/users/me
	GetPrivateProfile(ctx context.Context) (GetPrivateProfileRes, error)
	// GetPublicProfile implements getPublicProfile operation.
	//
	// Retrieve public user profile by ID.
	//
	// GET /v1/users/{id}
	GetPublicProfile(ctx context.Context, params GetPublicProfileParams) (GetPublicProfileRes, error)
	// UpdateUser implements updateUser operation.
	//
	// Update authenticated user's profile information.
	//
	// PATCH /v1/users/me
	UpdateUser(ctx context.Context, req *UserUpdate) (UpdateUserRes, error)
	// UpdateUserAvatar implements updateUserAvatar operation.
	//
	// Upload a new avatar image (max 2MB).
	//
	// PUT /v1/users/avatar
	UpdateUserAvatar(ctx context.Context, req *UpdateUserAvatarReq) (UpdateUserAvatarRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
